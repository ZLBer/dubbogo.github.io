{
  "filename": "choose_protocol.md",
  "__html": "<h1>修改使用的协议</h1>\n<h2>1. 准备工作</h2>\n<ul>\n<li>dubbo-go cli 工具和依赖工具已安装</li>\n<li>创建一个新的 demo 应用</li>\n</ul>\n<h2>2. 如何配置网络协议</h2>\n<p>在快速开始章节可以看到，生成的Demo 将 Protocol 设置为 tri，表明使用 Triple 协议进行服务暴露和服务调用。快速开始章节使用的配置 API 进行配置的写入，这样的好处是无需使用配置文件。我们摘取出和网络协议相关的内容进行说明。</p>\n<h3>使用配置文件</h3>\n<p>参考 samples/helloworld</p>\n<ul>\n<li>客户端使用配置文件设置网络协议</li>\n</ul>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">consumer:</span>\n    <span class=\"hljs-attr\">references:</span>\n      <span class=\"hljs-attr\">GreeterClientImpl:</span>\n        <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">tri</span> <span class=\"hljs-comment\"># set protcol to tri</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">com.apache.dubbo.sample.basic.IGreeter</span> \n</code></pre>\n<ul>\n<li>服务端使用配置文件设置网络协议</li>\n</ul>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">protocols:</span>\n    <span class=\"hljs-attr\">triple:</span> <span class=\"hljs-comment\"># define protcol-id 'triple'</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">tri</span> <span class=\"hljs-comment\"># set protcol to tri</span>\n      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">20000</span> <span class=\"hljs-comment\"># set port to be listened</span>\n  <span class=\"hljs-attr\">provider:</span>\n    <span class=\"hljs-attr\">services:</span>\n      <span class=\"hljs-attr\">GreeterProvider:</span>\n        <span class=\"hljs-attr\">protocol-ids:</span> <span class=\"hljs-string\">triple</span> <span class=\"hljs-comment\"># use protocol-ids named 'triple'</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">com.apache.dubbo.sample.basic.IGreeter</span>\n</code></pre>\n<h2>3. 编写 Dubbo 协议的接口和实现</h2>\n<h3>3.1 定义接口和传输结构，位于api/api.go</h3>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">package</span> api\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"context\"</span>\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/config\"</span>\n\thessian <span class=\"hljs-string\">\"github.com/apache/dubbo-go-hessian2\"</span>\n\t<span class=\"hljs-string\">\"time\"</span>\n)\n\n<span class=\"hljs-comment\">//1. 定义传输结构， 如需 Java 互通，字段需要与 Java 侧对应，首字母大写</span>\n<span class=\"hljs-keyword\">type</span> User <span class=\"hljs-keyword\">struct</span> {\n\tID   <span class=\"hljs-keyword\">string</span>\n\tName <span class=\"hljs-keyword\">string</span>\n\tAge  <span class=\"hljs-keyword\">int32</span>\n\tTime time.Time\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(u *User)</span> <span class=\"hljs-title\">JavaClassName</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"org.apache.dubbo.User\"</span> <span class=\"hljs-comment\">// 如果与 Java 互通，需要与 Java 侧 User class全名对应,</span>\n}\n\n\n<span class=\"hljs-keyword\">var</span> (\n\tUserProviderClient = &amp;UserProvider{} <span class=\"hljs-comment\">// 客户端指针</span>\n)\n\n<span class=\"hljs-comment\">// 2。 定义客户端存根类：UserProvider</span>\n<span class=\"hljs-keyword\">type</span> UserProvider <span class=\"hljs-keyword\">struct</span> {\n\t<span class=\"hljs-comment\">// dubbo标签，用于适配go侧客户端大写方法名 -&gt; java侧小写方法名，只有 dubbo 协议客户端才需要使用</span>\n\tGetUser  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, req <span class=\"hljs-keyword\">int32</span>)</span> <span class=\"hljs-params\">(*User, error)</span> //`<span class=\"hljs-title\">dubbo</span>:\"<span class=\"hljs-title\">getUser</span>\"`</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span>{\n\thessian.RegisterPOJO(&amp;User{}) <span class=\"hljs-comment\">// 注册传输结构到 hessian 库</span>\n\t<span class=\"hljs-comment\">// 注册客户端存根类到框架，实例化客户端接口指针 userProvider</span>\n\tconfig.SetConsumerService(UserProviderClient)\n}\n</code></pre>\n<h3>2.2 编写 Go-Server 配置和代码</h3>\n<p>server/dubbogo.yaml</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">registries:</span>\n    <span class=\"hljs-attr\">demoZK:</span> <span class=\"hljs-comment\"># 定义服务注册发现中心</span>\n      <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">zookeeper</span>\n      <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:2181</span>\n  <span class=\"hljs-attr\">protocols:</span>\n    <span class=\"hljs-attr\">dubbo:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dubbo</span> <span class=\"hljs-comment\"># 协议名 dubbo</span>\n      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">20000</span> <span class=\"hljs-comment\"># 监听端口</span>\n  <span class=\"hljs-attr\">provider:</span>\n    <span class=\"hljs-attr\">services:</span>\n      <span class=\"hljs-attr\">UserProvider:</span> <span class=\"hljs-comment\"># 服务提供结构类名</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">org.apache.dubbo.UserProvider</span>  <span class=\"hljs-comment\"># 接口需要与 go/java 客户端对应</span>\n</code></pre>\n<p>server/server.go</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"context\"</span>\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/common/logger\"</span> <span class=\"hljs-comment\">// dubbogo 框架日志</span>\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/config\"</span>\n\t_ <span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/imports\"</span> <span class=\"hljs-comment\">// dubbogo 框架依赖，所有dubbogo进程都需要隐式引入一次</span>\n\t<span class=\"hljs-string\">\"dubbo3-demo/api\"</span>\n\t<span class=\"hljs-string\">\"strconv\"</span>\n\t<span class=\"hljs-string\">\"time\"</span>\n)\n\n<span class=\"hljs-keyword\">type</span> UserProvider <span class=\"hljs-keyword\">struct</span> {\n}\n\n<span class=\"hljs-comment\">// 实现接口方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(u *UserProvider)</span> <span class=\"hljs-title\">GetUser</span><span class=\"hljs-params\">(ctx context.Context, req <span class=\"hljs-keyword\">int32</span>)</span> <span class=\"hljs-params\">(*api.User, error)</span></span> {\n\t<span class=\"hljs-keyword\">var</span> err error\n\tlogger.Infof(<span class=\"hljs-string\">\"req:%#v\"</span>, req)\n\tuser := &amp;api.User{}\n\tuser.ID = strconv.Itoa(<span class=\"hljs-keyword\">int</span>(req))\n\tuser.Name = <span class=\"hljs-string\">\"laurence\"</span>\n\tuser.Age = <span class=\"hljs-number\">22</span>\n\tuser.Time = time.Now()\n\t<span class=\"hljs-keyword\">return</span> user, err\n}\n\n<span class=\"hljs-comment\">//// MethodMapper 定义方法名映射，从 Go 的方法名映射到 Java 小写方法名，只有 dubbo 协议服务接口才需要使用</span>\n<span class=\"hljs-comment\">//// go -&gt; go 互通无需使用</span>\n<span class=\"hljs-comment\">//func (s *UserProvider) MethodMapper() map[string]string {</span>\n<span class=\"hljs-comment\">//\treturn map[string]string{</span>\n<span class=\"hljs-comment\">//\t\t\"GetUser\": \"getUser\",</span>\n<span class=\"hljs-comment\">//\t}</span>\n<span class=\"hljs-comment\">//}</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span>{\n\tconfig.SetProviderService(&amp;UserProvider{}) <span class=\"hljs-comment\">// 注册服务提供者类，类名与配置文件中的 service 对应</span>\n}\n\n<span class=\"hljs-comment\">// export DUBBO_GO_CONFIG_PATH=dubbogo.yml 运行前需要设置环境变量，指定配置文件位置</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-keyword\">if</span> err := config.Load(); err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\t<span class=\"hljs-keyword\">select</span> {}\n}\n\n</code></pre>\n<h3>2.3 编写 Go-Client 配置和代码</h3>\n<p>client/dubbogo.yaml</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">registries:</span>\n    <span class=\"hljs-attr\">demoZK:</span> <span class=\"hljs-comment\"># 定义服务注册发现中心</span>\n      <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">zookeeper</span>\n      <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:2181</span>\n  <span class=\"hljs-attr\">consumer:</span>\n    <span class=\"hljs-attr\">references:</span>\n      <span class=\"hljs-attr\">UserProvider:</span> <span class=\"hljs-comment\"># 存根类名</span>\n        <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">dubbo</span> <span class=\"hljs-comment\"># dubbo 协议，默认 hessian2 序列化方式</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">org.apache.dubbo.UserProvider</span> <span class=\"hljs-comment\"># 接口需要与 go/java 客户端对应</span>\n</code></pre>\n<p>client/client.go</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"context\"</span>\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/common/logger\"</span> \n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/config\"</span>\n\t_ <span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/imports\"</span> \n\t<span class=\"hljs-string\">\"dubbo3-demo/api\"</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>{\n  <span class=\"hljs-comment\">// 启动框架</span>\n\t<span class=\"hljs-keyword\">if</span> err := config.Load(); err != <span class=\"hljs-literal\">nil</span>{\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\t<span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">int32</span> = <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-comment\">// 发起调用</span>\n\tuser, err := api.UserProviderClient.GetUser(context.TODO(), i)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\tlogger.Infof(<span class=\"hljs-string\">\"response result: %+v\"</span>, user)\n}\n</code></pre>\n<h2>4. 启动服务</h2>\n<p>开启两个终端，分别进入server client 目录</p>\n<p>分别执行；</p>\n<pre><code class=\"language-shell\">export DUBBO_GO_CONFIG_PATH=dubbogo.yml\ngo run .\n</code></pre>\n<p>先后启动服务端和客户端, 可在客户端看到输出：</p>\n<pre><code class=\"language-shell\">response result: &amp;{ID:1 Name:laurence Age:22 Time:2021-11-12 17:59:39.185 +0800 CST}\n</code></pre>\n<p>调用成功</p>\n<p>更多samples可以参阅 <a href=\"../../samples/samples_repo.html\">【dubbo-go-samples】</a></p>\n",
  "link": "/zh-cn/docs/user/tasks/rpc/choose_protocol.html",
  "meta": {
    "title": "选择使用的网络协议",
    "keywords": "选择使用的网络协议",
    "description": "选择使用的网络协议"
  }
}