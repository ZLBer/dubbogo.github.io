{
  "filename": "aop_and_extension.md",
  "__html": "<h1>组件加载与可扩展性</h1>\n<h2>1. extension 模块与 init 方法</h2>\n<h3>1.1 接口与实现</h3>\n<p>golang 中的一个接口往往伴随多个实现类，dubbo-go 提供了针对接口实现类的可插拔可扩展机制。降低模块之间的耦合性，方便开发者引入、自定义组件。</p>\n<h3>1.2 golang 中的 init 方法</h3>\n<p>init 方法作为 golang 中特殊的方法，用户引入一组模块后，会在程序启动时率先执行这些模块内的init 方法，进行加载逻辑，该方法是dubbogo注册扩展组件的重要方式。</p>\n<h3>1.3 extension 模块</h3>\n<p>在框架源码中，有一个特殊的模块: common/extension ，这一模块负责缓存所有可扩展组件的实现。</p>\n<p>以负载均衡模块为例：common/extension/loadbalance.go</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">package</span> extension\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/cluster/loadbalance\"</span>\n)\n\n<span class=\"hljs-keyword\">var</span> loadbalances = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">loadbalance</span>.<span class=\"hljs-title\">LoadBalance</span>)</span>\n\n<span class=\"hljs-comment\">// SetLoadbalance sets the loadbalance extension with @name</span>\n<span class=\"hljs-comment\">// For example: random/round_robin/consistent_hash/least_active/...</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">SetLoadbalance</span><span class=\"hljs-params\">(name <span class=\"hljs-keyword\">string</span>, fcn <span class=\"hljs-keyword\">func</span>()</span> <span class=\"hljs-title\">loadbalance</span>.<span class=\"hljs-title\">LoadBalance</span>)</span> {\n\tloadbalances[name] = fcn\n}\n\n<span class=\"hljs-comment\">// GetLoadbalance finds the loadbalance extension with @name</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetLoadbalance</span><span class=\"hljs-params\">(name <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-title\">loadbalance</span>.<span class=\"hljs-title\">LoadBalance</span></span> {\n\t<span class=\"hljs-keyword\">if</span> loadbalances[name] == <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">\"loadbalance for \"</span> + name + <span class=\"hljs-string\">\" is not existing, make sure you have import the package.\"</span>)\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> loadbalances[name]()\n}\n</code></pre>\n<p>该模块包含Get 方法和Set方法。Get 返回实例化的 LoadBalance 接口，Set 方法用于注册工厂函数，map 用于缓存工厂函数。</p>\n<p>当用户引入 _ &quot;<a href=\"http://dubbo.apache.org/dubbo-go/v3/cluster/loadbalance/random\">dubbo.apache.org/dubbo-go/v3/cluster/loadbalance/random</a>&quot; 时，将会加载对应模块的init函数，调用 Set 方法注册唯一key和工厂函数和到上述map中。</p>\n<p>cluster/loadbalance/random/loadbalance.go</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">package</span> random\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"math/rand\"</span>\n)\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/cluster/loadbalance\"</span>\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/common/constant\"</span>\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/common/extension\"</span>\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/protocol\"</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span> {\n\textension.SetLoadbalance(constant.LoadBalanceKeyRandom, NewRandomLoadBalance)\n}\n</code></pre>\n<p>至此，当所有init方法执行完毕，可以通过 extension 模块 Get 方法来获取实例化对象。</p>\n<h3>1.4 imports 模块</h3>\n<p>dubbogo 将所有内置的模块全部放置在 imports/imports.go 内，用户在使用框架时，需要引入该模块，从而使用框架提供的基础能力。</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">import</span> (\n\t_ <span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/imports\"</span>\n)\n</code></pre>\n<h2>2. 组件加载流程</h2>\n<ol>\n<li>\n<p>用户在代码中引入 _  &quot;<a href=\"http://dubbo.apache.org/dubbo-go/v3/imports\">dubbo.apache.org/dubbo-go/v3/imports</a>&quot;</p>\n</li>\n<li>\n<p>程序启动，init 函数被依次执行，注册工厂函数/实例化对象到 extension 模块。</p>\n</li>\n<li>\n<p>框架启动，加载配置，配置中获取需要加载的模块key，根据key获取实例化对象。</p>\n<p>用户也可以手动调用 extension 的 Get 方法，获取实例化对象并直接使用。</p>\n</li>\n</ol>\n<h2>3. 自定义组件</h2>\n<p>在上述介绍的基础之上，开发人员可以效仿内置模块，编写自定义扩展组件。</p>\n<p>可参考任务<a href=\"../../tasks/service_management/aop.html\">【自定义服务调用中间件】</a>，该例子以Filter 接口为例，基于面向切面编程的思路，提供给用户介入调用链路进行过滤的能力。</p>\n<h2>4. 面向切面编程的设计（AOP）</h2>\n<p>在 Dubbo-go 服务框架中，许多接口是基于 AOP 的思路进行设计的。例如 Invoker、Filter、LoadBalance、Router。</p>\n<p>这些接口的多种实现往往组成一组调用链，单个实现类只处理自己所关注的逻辑。</p>\n<p>相关阅读：<a href=\"https://en.wikipedia.org/wiki/Aspect-oriented_programming\">【AOP wikipedia】</a></p>\n<p>下一章：<a href=\"./visualization.html\">【可视化】</a></p>\n",
  "link": "/zh-cn/docs/user/concept/service_management/aop_and_extension.html",
  "meta": {
    "title": "AOP 与可扩展机制",
    "keywords": "AOP 与可扩展机制",
    "description": "AOP 与可扩展机制"
  }
}