{
  "filename": "go_java_interactive.md",
  "__html": "<h1>Go-Java 互通示例</h1>\n<h2>准备工作</h2>\n<h3>环境</h3>\n<p>JDK 8，Golang &gt;= 1.11，Dubbo 3.0.2，zookeeper 启动，</p>\n<h3>Go- Java 互通前提</h3>\n<ul>\n<li>\n<p>Go/Java 定义的传输结构一致</p>\n<ul>\n<li>PB 序列化</li>\n</ul>\n<p>proto for Go</p>\n<pre><code class=\"language-protobuf\"><span class=\"hljs-comment\">// The response message containing the greetings</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">message</span> <span class=\"hljs-title\">User</span> </span>{\n  <span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-built_in\">string</span> id = <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-built_in\">int32</span> age = <span class=\"hljs-number\">3</span>;\n}\n</code></pre>\n<p>proto for Java</p>\n<pre><code class=\"language-protobuf\"><span class=\"hljs-comment\">// The response message containing the greetings</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">message</span> <span class=\"hljs-title\">User</span> </span>{\n  <span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-built_in\">string</span> id = <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-built_in\">int32</span> age = <span class=\"hljs-number\">3</span>;\n}\n</code></pre>\n<ul>\n<li>Hessian 序列化</li>\n</ul>\n<p>POJO for Go，需参考 <a href=\"https://www.yuque.com/docs/share/c698bd6e-e4d6-47db-bc1c-c757cc9b4f3e?\">Dubbogo Hessian 序列化支持文档</a></p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> User <span class=\"hljs-keyword\">struct</span> {\n  ID   <span class=\"hljs-keyword\">string</span>\n  Name <span class=\"hljs-keyword\">string</span>\n  Age  <span class=\"hljs-keyword\">int32</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(u *User)</span> <span class=\"hljs-title\">JavaClassName</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"org.apache.dubbo.User\"</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span>{\n\thessian.RegisterPOJO(&amp;User{})  \n}\n</code></pre>\n<p>POJO for Java</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.apache.dubbo\n  \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>{\n  <span class=\"hljs-keyword\">private</span> String id;\n  <span class=\"hljs-keyword\">private</span> String name;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age;\n}\n</code></pre>\n</li>\n<li>\n<p>Java 需要互通的方法签名与 Go 一致</p>\n<p>例如：</p>\n<p>Java Interface</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">IGreeter</span> </span>{\n  <span class=\"hljs-comment\">/**\n   * &lt;pre&gt;\n   *  Sends a greeting\n   * &lt;/pre&gt;\n   */</span>\n\t<span class=\"hljs-function\">User <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(HelloRequest request)</span></span>;\n}\n</code></pre>\n<p>Go client (由protoc-gen-triple 根据 proto 文件自动生成)</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> GreeterClientImpl <span class=\"hljs-keyword\">struct</span> {\n\t<span class=\"hljs-comment\">// Sends a greeting</span>\n\tSayHello <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, in *HelloRequest)</span> <span class=\"hljs-params\">(*User, error)</span></span>\n}\n</code></pre>\n<p>Go server (由开发者定义)</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> GreeterProvider <span class=\"hljs-keyword\">struct</span> {\n\tapi.GreeterProviderBase\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *GreeterProvider)</span> <span class=\"hljs-title\">SayHello</span><span class=\"hljs-params\">(ctx context.Context, in *api.HelloRequest)</span> <span class=\"hljs-params\">(*api.User, error)</span></span> {\n\tlogger.Infof(<span class=\"hljs-string\">\"Dubbo3 GreeterProvider get user name = %s\\n\"</span>, in.Name)\n\t<span class=\"hljs-keyword\">return</span> &amp;api.User{Name: <span class=\"hljs-string\">\"Hello \"</span> + in.Name, Id: <span class=\"hljs-string\">\"12345\"</span>, Age: <span class=\"hljs-number\">21</span>}, <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n<p>Go 方法需要遵守 <a href=\"https://www.yuque.com/docs/share/eff9c51f-a7f4-47d6-87ff-11a2152bdffe?\">Dubbogo 3.0 用户服务接口定义规范</a></p>\n</li>\n<li>\n<p>Java 的接口全名与Go service/reference 配置的 interface 一致</p>\n<p>例如：</p>\n<p>Java 的接口全名：com.apache.dubbo.sample.basic.IGreeter</p>\n<p>Go-client:</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">references:</span>\n  <span class=\"hljs-attr\">GreeterClientImpl:</span>\n  <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">tri</span>\n  <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">com.apache.dubbo.sample.basic.IGreeter</span> <span class=\"hljs-comment\"># must be compatible with grpc or dubbo-java</span>\n</code></pre>\n<p>Go-server:</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">GreeterProvider:</span>\n  <span class=\"hljs-attr\">protocolIDs:</span> <span class=\"hljs-string\">tripleProtocol</span>\n  <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">com.apache.dubbo.sample.basic.IGreeter</span> <span class=\"hljs-comment\"># must be compatible with grpc or dubbo-java</span>\n</code></pre>\n</li>\n</ul>\n<h2>1. 基于 Triple 协议互通 (PB序列化)</h2>\n<p>参考 <a href=\"https://github.com/apache/dubbo-go-samples/tree/master/helloworld\">dubbo-go-samples/helloworld</a></p>\n<h3>1.1 Go-Client -&gt; Java-Server</h3>\n<h4>Java-Server 启动</h4>\n<ol>\n<li>定义 Java 的 PB 文件，可参考 <a href=\"https://dubbo.apache.org/zh/docs/quick-start/\">Dubbo 快速开始</a></li>\n</ol>\n<pre><code class=\"language-protobuf\">syntax = <span class=\"hljs-string\">\"proto3\"</span>;\n\n<span class=\"hljs-keyword\">option</span> java_package = <span class=\"hljs-string\">\"org.apache.dubbo.sample.hello\"</span>;\n\n<span class=\"hljs-keyword\">package</span> helloworld;\n\n<span class=\"hljs-comment\">// The request message containing the user's name.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">message</span> <span class=\"hljs-title\">HelloRequest</span> </span>{\n  <span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-comment\">// The response message containing the greetings</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">message</span> <span class=\"hljs-title\">User</span> </span>{\n  <span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-built_in\">string</span> id = <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-built_in\">int32</span> age = <span class=\"hljs-number\">3</span>;\n}\n</code></pre>\n<p>该接口描述文件定义了将会生成的 Java 类 org.apache.dubbo.sample.hello.Helloworld，以及类中包含的传输结构 HelloRequest 和 User 类。</p>\n<ol start=\"2\">\n<li>\n<p>定义服务接口:</p>\n<p>com.apache.dubbo.sample.basic.IGreeter</p>\n</li>\n</ol>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.apache.dubbo.sample.basic;\n\n<span class=\"hljs-comment\">// 引入根据 PB 生成的类</span>\n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.sample.hello.Helloworld.User;\n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.sample.hello.Helloworld.HelloRequest;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">IGreeter</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * &lt;pre&gt;\n     *  Sends a greeting\n     * &lt;/pre&gt;\n     */</span>\n  <span class=\"hljs-comment\">// 定义接口</span>\n\t<span class=\"hljs-function\">User <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(HelloRequest request)</span></span>;\n}\n</code></pre>\n<ol start=\"3\">\n<li>\n<p>实现服务接口:</p>\n<p>IGreeter1Impl.java</p>\n</li>\n</ol>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.apache.dubbo.sample.basic;\n\n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.sample.hello.Helloworld.User;\n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.sample.hello.Helloworld.HelloRequest;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IGreeter1Impl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">IGreeter</span> </span>{\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(HelloRequest request)</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"receiv: \"</span> + request);\n        User usr = User.newBuilder()\n                .setName(<span class=\"hljs-string\">\"hello \"</span> + request.getName())\n                .setAge(<span class=\"hljs-number\">18</span>)\n                .setId(<span class=\"hljs-string\">\"12345\"</span>).build();\n        <span class=\"hljs-keyword\">return</span> usr;\n    }\n}\n</code></pre>\n<ol start=\"4\">\n<li>\n<p>使用 Dubbo3 框架启动服务</p>\n<p>ApiProvider.java</p>\n</li>\n</ol>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.apache.dubbo.sample.basic;\n\n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.common.constants.CommonConstants;\n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.config.ApplicationConfig;\n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.config.ProtocolConfig;\n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.config.RegistryConfig;\n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.config.ServiceConfig;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.CountDownLatch;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ApiProvider</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException </span>{\n      ServiceConfig&lt;IGreeter&gt; service = <span class=\"hljs-keyword\">new</span> ServiceConfig&lt;&gt;();\n      service.setInterface(IGreeter<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n      service.setRef(<span class=\"hljs-keyword\">new</span> IGreeter1Impl());\n      <span class=\"hljs-comment\">// 使用 Triple 协议</span>\n      service.setProtocol(<span class=\"hljs-keyword\">new</span> ProtocolConfig(CommonConstants.TRIPLE, <span class=\"hljs-number\">50051</span>));\n      service.setApplication(<span class=\"hljs-keyword\">new</span> ApplicationConfig(<span class=\"hljs-string\">\"demo-provider\"</span>));\n      <span class=\"hljs-comment\">// 使用 ZK 作为注册中心</span>\n      service.setRegistry(<span class=\"hljs-keyword\">new</span> RegistryConfig(<span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span>));\n      service.export();\n      System.out.println(<span class=\"hljs-string\">\"dubbo service started\"</span>);\n      <span class=\"hljs-keyword\">new</span> CountDownLatch(<span class=\"hljs-number\">1</span>).await();\n    }\n}\n</code></pre>\n<p>启动服务，可看到输出如下日志，代表 Java Triple Server 启动成功</p>\n<pre><code>main  INFO bootstrap.DubboBootstrap:  [DUBBO] DubboBootstrap has started., dubbo version: 3.0.2, current host: 192.168.0.108\ndubbo service started\n</code></pre>\n<h4>Go-Client 启动</h4>\n<p>对于已经启动的Dubbo服务，如需要开发与其对应的Go-client，需要进行如下步骤：</p>\n<ol>\n<li>\n<p>编写与 Java 适配的 proto文件</p>\n<p>samples_api.proto</p>\n</li>\n</ol>\n<pre><code class=\"language-protobuf\">\nsyntax = <span class=\"hljs-string\">\"proto3\"</span>;\n<span class=\"hljs-keyword\">package</span> api; <span class=\"hljs-comment\">// pacakge 名随意指定</span>\n\n<span class=\"hljs-comment\">// necessary</span>\n<span class=\"hljs-keyword\">option</span> go_package = <span class=\"hljs-string\">\"./;api\"</span>;\n\n<span class=\"hljs-comment\">// The greeting service definition.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">service</span> <span class=\"hljs-title\">Greeter</span> </span>{\n  <span class=\"hljs-comment\">// Sends a greeting</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">rpc</span> SayHello (HelloRequest) <span class=\"hljs-keyword\">returns</span> (User) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1</span>;\n}\n\n<span class=\"hljs-comment\">// The response message containing the greetings</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">message</span> <span class=\"hljs-title\">User</span> </span>{\n  <span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-built_in\">string</span> id = <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-built_in\">int32</span> age = <span class=\"hljs-number\">3</span>;\n}\n</code></pre>\n<ol start=\"2\">\n<li>使用 protoc-gen-triple 生成接口文件</li>\n</ol>\n<pre><code class=\"language-bash\">protoc -I . samples_api.proto --triple_out=plugins=triple:.\n</code></pre>\n<ol start=\"3\">\n<li>撰写配置文件: dubbogo.yml</li>\n</ol>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">registries:</span>\n    <span class=\"hljs-attr\">demoZK:</span>\n      <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">zookeeper</span>\n      <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">3s</span>\n      <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:2181</span>\n  <span class=\"hljs-attr\">consumer:</span>\n    <span class=\"hljs-attr\">registryIDs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">demoZK</span>\n    <span class=\"hljs-attr\">references:</span>\n      <span class=\"hljs-attr\">GreeterClientImpl:</span>\n        <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">tri</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">com.apache.dubbo.sample.basic.IGreeter</span> <span class=\"hljs-comment\"># must be compatible with grpc or dubbo-java</span>\n</code></pre>\n<ol start=\"4\">\n<li>撰写 main.go 文件，发起调用</li>\n</ol>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// 引入生成的接口结构</span>\n<span class=\"hljs-keyword\">var</span> grpcGreeterImpl = <span class=\"hljs-built_in\">new</span>(api.GreeterClientImpl)\n\n<span class=\"hljs-comment\">// export DUBBO_GO_CONFIG_PATH=dubbogo.yml</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tconfig.SetConsumerService(grpcGreeterImpl)\n\t<span class=\"hljs-keyword\">if</span> err := config.Load(); err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\ttime.Sleep(<span class=\"hljs-number\">3</span> * time.Second)\n\n\tlogger.Info(<span class=\"hljs-string\">\"start to test dubbo\"</span>)\n\treq := &amp;api.HelloRequest{\n\t\tName: <span class=\"hljs-string\">\"laurence\"</span>,\n\t}\n\treply, err := grpcGreeterImpl.SayHello(context.Background(), req)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\tlogger.Error(err)\n\t}\n\tlogger.Infof(<span class=\"hljs-string\">\"client response result: %v\\n\"</span>, reply)\n}\n</code></pre>\n<ol start=\"5\">\n<li>可查看到调用成功的日志</li>\n</ol>\n<ul>\n<li>go-client</li>\n</ul>\n<pre><code>cmd/client.go:53        client response result: name:&quot;hello laurence&quot; id:&quot;12345&quot; age:18 \n</code></pre>\n<ul>\n<li>java-server</li>\n</ul>\n<pre><code>receiv: name: &quot;laurence&quot;\n</code></pre>\n<h3>1.2 Java-Client -&gt; Go-Server</h3>\n<h4>Go-Server 启动</h4>\n<ol>\n<li>定义配置文件</li>\n</ol>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">registries:</span>\n    <span class=\"hljs-attr\">demoZK:</span>\n      <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">zookeeper</span>\n      <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">3s</span>\n      <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:2181</span>\n  <span class=\"hljs-attr\">protocols:</span>\n    <span class=\"hljs-attr\">triple:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">tri</span>\n      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">20000</span>\n  <span class=\"hljs-attr\">provider:</span>\n    <span class=\"hljs-attr\">registryIDs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">demoZK</span>\n    <span class=\"hljs-attr\">services:</span>\n      <span class=\"hljs-attr\">GreeterProvider:</span>\n        <span class=\"hljs-attr\">protocolIDs:</span> <span class=\"hljs-string\">triple</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">com.apache.dubbo.sample.basic.IGreeter</span> <span class=\"hljs-comment\"># must be compatible with grpc or dubbo-java</span>\n</code></pre>\n<ol start=\"2\">\n<li>引入传输结构，定义服务</li>\n</ol>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> GreeterProvider <span class=\"hljs-keyword\">struct</span> {\n\tapi.GreeterProviderBase\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *GreeterProvider)</span> <span class=\"hljs-title\">SayHello</span><span class=\"hljs-params\">(ctx context.Context, in *api.HelloRequest)</span> <span class=\"hljs-params\">(*api.User, error)</span></span> {\n\tlogger.Infof(<span class=\"hljs-string\">\"Dubbo3 GreeterProvider get user name = %s\\n\"</span>, in.Name)\n\t<span class=\"hljs-keyword\">return</span> &amp;api.User{Name: <span class=\"hljs-string\">\"Hello \"</span> + in.Name, Id: <span class=\"hljs-string\">\"12345\"</span>, Age: <span class=\"hljs-number\">21</span>}, <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n<ol start=\"3\">\n<li>启动服务</li>\n</ol>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// export DUBBO_GO_CONFIG_PATH=dubbogo.yml</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tconfig.SetProviderService(&amp;GreeterProvider{})\n\t<span class=\"hljs-keyword\">if</span> err := config.Load(); err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\t<span class=\"hljs-keyword\">select</span> {}\n}\n</code></pre>\n<h4>Java-Client 启动</h4>\n<ol>\n<li>\n<p>proto 文件编写和接口生成参考上述 java-server 介绍</p>\n</li>\n<li>\n<p>启动Consumer</p>\n<p>ApiCnosumer.java</p>\n</li>\n</ol>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ApiConsumer</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException, IOException </span>{\n        ReferenceConfig&lt;IGreeter&gt; ref = <span class=\"hljs-keyword\">new</span> ReferenceConfig&lt;&gt;();\n        ref.setInterface(IGreeter<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n        ref.setCheck(<span class=\"hljs-keyword\">false</span>);\n        ref.setProtocol(CommonConstants.TRIPLE);\n        ref.setLazy(<span class=\"hljs-keyword\">true</span>);\n        ref.setTimeout(<span class=\"hljs-number\">100000</span>);\n        ref.setApplication(<span class=\"hljs-keyword\">new</span> ApplicationConfig(<span class=\"hljs-string\">\"demo-consumer\"</span>));\n        ref.setRegistry(<span class=\"hljs-keyword\">new</span> RegistryConfig(<span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span>));\n        <span class=\"hljs-keyword\">final</span> IGreeter iGreeter = ref.get();\n\n        System.out.println(<span class=\"hljs-string\">\"dubbo ref started\"</span>);\n        Helloworld.HelloRequest req = Helloworld.HelloRequest.newBuilder().setName(<span class=\"hljs-string\">\"laurence\"</span>).build();\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">final</span> Helloworld.User reply = iGreeter.sayHello(req);\n            TimeUnit.SECONDS.sleep(<span class=\"hljs-number\">1</span>);\n            System.out.println(<span class=\"hljs-string\">\"Reply:\"</span> + reply);\n        } <span class=\"hljs-keyword\">catch</span> (Throwable t) {\n            t.printStackTrace();\n        }\n        System.in.read();\n    }\n}\n</code></pre>\n<h2>2. 基于 Dubbo 协议互通 (Hessian2序列化)</h2>\n<p>参考 <a href=\"https://github.com/apache/dubbo-go-samples/tree/rpc/dubbo\">dubbo-go-samples/rpc/dubbo</a></p>\n<h3>2.1 Go-Client -&gt; Java-Server</h3>\n<h4>Java-Server 启动</h4>\n<ol>\n<li>定义 Java 接口、参数和返回值，可参考 <a href=\"https://dubbo.apache.org/zh/docs/quick-start/\">Dubbo 快速开始</a></li>\n</ol>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.apache.dubbo;\n\n<span class=\"hljs-comment\">// 需要暴露的服务接口</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserProvider</span> </span>{\n    <span class=\"hljs-function\">User <span class=\"hljs-title\">getUser</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> usercode)</span></span>;\n}\n\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.apache.dubbo;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span>  </span>{\n\n    <span class=\"hljs-keyword\">private</span> String id;\n\n    <span class=\"hljs-keyword\">private</span> String name;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age;\n\n    <span class=\"hljs-keyword\">private</span> Date time = <span class=\"hljs-keyword\">new</span> Date();\n\t\t<span class=\"hljs-comment\">/* ... */</span>\n}\n</code></pre>\n<ol start=\"2\">\n<li>实现服务接口:</li>\n</ol>\n<p>UserProviderImpl.java</p>\n<pre><code class=\"language-java\">\n<span class=\"hljs-keyword\">package</span> org.apache.dubbo;\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserProviderImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UserProvider</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">getUser</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> userCode)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> User(String.valueOf(userCode), <span class=\"hljs-string\">\"userCode get\"</span>, <span class=\"hljs-number\">48</span>);\n    }\n}\n\n</code></pre>\n<ol start=\"3\">\n<li>使用SpringBoot 启动</li>\n</ol>\n<p>Provider.java</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.apache.dubbo;\n\n<span class=\"hljs-comment\">// use when config by API</span>\n<span class=\"hljs-comment\">/* \nimport java.util.concurrent.CountDownLatch;\n\nimport org.apache.dubbo.common.constants.CommonConstants;\nimport org.apache.dubbo.config.ApplicationConfig;\nimport org.apache.dubbo.config.ProtocolConfig;\nimport org.apache.dubbo.config.RegistryConfig;\nimport org.apache.dubbo.config.ServiceConfig;\n*/</span>\n<span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Provider</span> </span>{\n    <span class=\"hljs-comment\">// main function, config from spring boot</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        ClassPathXmlApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-keyword\">new</span> String[]{<span class=\"hljs-string\">\"META-INF/spring/dubbo.provider.xml\"</span>});\n        context.start();\n        System.in.read(); <span class=\"hljs-comment\">// press any key to exit</span>\n    }\n\n  \n<span class=\"hljs-comment\">//    config by API</span>\n<span class=\"hljs-comment\">//    public static void startComplexService() throws InterruptedException {</span>\n<span class=\"hljs-comment\">//        ServiceConfig&lt;ComplexProvider&gt; service = new ServiceConfig&lt;&gt;();</span>\n<span class=\"hljs-comment\">//        service.setInterface(ComplexProvider.class);</span>\n<span class=\"hljs-comment\">//        service.setRef(new ComplexProviderImpl());</span>\n<span class=\"hljs-comment\">//        service.setProtocol(new ProtocolConfig(CommonConstants.DUBBO_PROTOCOL, 20001));</span>\n<span class=\"hljs-comment\">//        service.setApplication(new ApplicationConfig(\"demo-provider\"));</span>\n<span class=\"hljs-comment\">//        service.setRegistry(new RegistryConfig(\"zookeeper://127.0.0.1:2181\"));</span>\n<span class=\"hljs-comment\">//        service.export();</span>\n<span class=\"hljs-comment\">//        System.out.println(\"dubbo service started\");</span>\n<span class=\"hljs-comment\">//        new CountDownLatch(1).await();</span>\n<span class=\"hljs-comment\">//    }</span>\n}\n\n</code></pre>\n<ol start=\"4\">\n<li>\n<p>通过Spring 配置 Dubbo 参数</p>\n<p>Resources/META-INF.spring/dubbo.provider.xml</p>\n</li>\n</ol>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-comment\">&lt;!--\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n--&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n\t   <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n\t   <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://code.alibabatech.com/schema/dubbo\"</span>\n\t   <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n\thttp://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n\n\t<span class=\"hljs-comment\">&lt;!-- 应用名 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"user-info-server\"</span>/&gt;</span>\n\t<span class=\"hljs-comment\">&lt;!-- 连接到哪个本地注册中心 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"dubbogo\"</span>  <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span> /&gt;</span>\n\t<span class=\"hljs-comment\">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">host</span>=<span class=\"hljs-string\">\"127.0.0.1\"</span> <span class=\"hljs-attr\">port</span>=<span class=\"hljs-string\">\"20010\"</span> /&gt;</span>\n\t<span class=\"hljs-comment\">&lt;!-- 声明需要暴露的服务接口 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"aaa\"</span> <span class=\"hljs-attr\">registry</span>=<span class=\"hljs-string\">\"dubbogo\"</span> <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"3000\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"demoService\"</span>/&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"bbb\"</span> <span class=\"hljs-attr\">registry</span>=<span class=\"hljs-string\">\"dubbogo\"</span> <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"3000\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"otherService\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"2.0\"</span>/&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ccc\"</span> <span class=\"hljs-attr\">registry</span>=<span class=\"hljs-string\">\"dubbogo\"</span> <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"3000\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"otherService\"</span> <span class=\"hljs-attr\">group</span>=<span class=\"hljs-string\">\"as\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"2.0\"</span>/&gt;</span>\n\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.dubbo.UserProviderImpl\"</span> /&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"otherService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.dubbo.UserProviderAnotherImpl\"</span>/&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p>启动Provider类，可看到输出如下日志，代表 Dubbo Server 启动成功</p>\n<pre><code>[DUBBO] DubboBootstrap is ready., dubbo version: 2.7.7, current host: 127.0.0.1\n[DUBBO] DubboBootstrap has started., dubbo version: 2.7.7, current host: 127.0.0.1\n</code></pre>\n<h4>Go-Client 启动</h4>\n<p>对于已经启动的Dubbo服务，如需要开发与其对应的Go-client，需要进行如下步骤：</p>\n<ol>\n<li>编写与 Java 适配的 POJO 类 User</li>\n</ol>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">import</span>(\n  hessian <span class=\"hljs-string\">\"github.com/apache/dubbo-go-hessian2\"</span>\n)\n\n<span class=\"hljs-comment\">// 字段需要与 Java 侧对应，首字母大写</span>\n<span class=\"hljs-keyword\">type</span> User <span class=\"hljs-keyword\">struct</span> {\n\tID   <span class=\"hljs-keyword\">string</span>\n\tName <span class=\"hljs-keyword\">string</span>\n\tAge  <span class=\"hljs-keyword\">int32</span>\n\tTime time.Time\n}\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(u *User)</span> <span class=\"hljs-title\">JavaClassName</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"org.apache.dubbo.User\"</span> <span class=\"hljs-comment\">// 需要与 Java 侧 User 类名对应</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span>{\n\thessian.RegisterPOJO(&amp;pkg.User{}) <span class=\"hljs-comment\">// 注册 POJO</span>\n}\n</code></pre>\n<ol start=\"2\">\n<li>\n<p>编写与 Java 侧一致的客户端存根类，其接口方法需要与Java侧对应</p>\n<p>规定第一个参数必须为 context.Context，最后一个返回值必须为 error</p>\n</li>\n</ol>\n<pre><code class=\"language-go\">\n<span class=\"hljs-keyword\">import</span>(\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/config\"</span>\n)\n\n<span class=\"hljs-keyword\">var</span> (\n\tuserProvider = &amp;pkg.UserProvider{}\n)\n\n<span class=\"hljs-comment\">// UserProvider 客户端存根类</span>\n<span class=\"hljs-keyword\">type</span> UserProvider <span class=\"hljs-keyword\">struct</span> {\n  <span class=\"hljs-comment\">// dubbo标签，用于适配go侧客户端大写方法名 -&gt; java侧小写方法名，只有 dubbo 协议客户端才需要使用</span>\n\tGetUser  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, req <span class=\"hljs-keyword\">int32</span>)</span> <span class=\"hljs-params\">(*User, error)</span> `<span class=\"hljs-title\">dubbo</span>:\"<span class=\"hljs-title\">getUser</span>\"`</span> \n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span>{\n  <span class=\"hljs-comment\">// 注册客户端存根类到框架，实例化客户端接口指针 userProvider</span>\n\tconfig.SetConsumerService(userProvider)\n}\n\n</code></pre>\n<ol start=\"3\">\n<li>撰写配置文件: dubbogo.yml</li>\n</ol>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">registries:</span>\n    <span class=\"hljs-attr\">demoZK:</span> <span class=\"hljs-comment\"># 定义注册中心ID</span>\n      <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">zookeeper</span>\n      <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">3s</span>\n      <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:2181</span>\n  <span class=\"hljs-attr\">consumer:</span>\n    <span class=\"hljs-attr\">registryIDs:</span> <span class=\"hljs-comment\"># 使用注册中心ID</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">demoZK</span>\n    <span class=\"hljs-attr\">references:</span>\n      <span class=\"hljs-attr\">UserProvider:</span> <span class=\"hljs-comment\"># 存根类名</span>\n        <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">dubbo</span> <span class=\"hljs-comment\"># dubbo 协议，默认 hessian2 序列化方式</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">org.apache.dubbo.UserProvider</span> <span class=\"hljs-comment\"># 接口需要与Java侧对应</span>\n  <span class=\"hljs-attr\">logger:</span>\n    <span class=\"hljs-attr\">zap-config:</span>\n      <span class=\"hljs-attr\">level:</span> <span class=\"hljs-string\">info</span> <span class=\"hljs-comment\"># 日志级别</span>\n</code></pre>\n<p>或者使用Triple + Hessian2 序列化请求Server。本例子如果跟Java Server互通则不能用Triple。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">registries:</span>\n    <span class=\"hljs-attr\">demoZK:</span>\n      <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">zookeeper</span>\n      <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">3s</span>\n      <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:2181</span>\n  <span class=\"hljs-attr\">consumer:</span>\n    <span class=\"hljs-attr\">registryIDs:</span> \n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">demoZK</span>\n    <span class=\"hljs-attr\">references:</span>\n      <span class=\"hljs-attr\">UserProvider:</span> \n        <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">tri</span> <span class=\"hljs-comment\"># triple 协议</span>\n        <span class=\"hljs-attr\">serialization:</span> <span class=\"hljs-string\">hessian2</span> <span class=\"hljs-comment\"># 序列化方式 hessian2，triple 协议默认为 pb 序列化，不配置会报错</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">org.apache.dubbo.UserProvider</span> \n  <span class=\"hljs-attr\">logger:</span>\n    <span class=\"hljs-attr\">zap-config:</span>\n      <span class=\"hljs-attr\">level:</span> <span class=\"hljs-string\">info</span>\n</code></pre>\n<ol start=\"4\">\n<li>撰写 main.go 文件，发起调用</li>\n</ol>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>{\n  config.Load()\n\t<span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">int32</span> = <span class=\"hljs-number\">1</span>\n\tuser, err := userProvider.GetUser2(context.TODO(), i)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\tlogger.Infof(<span class=\"hljs-string\">\"response result: %v\"</span>, user)\n}\n</code></pre>\n<ol start=\"5\">\n<li>可查看到调用成功的日志,符合预期</li>\n</ol>\n<ul>\n<li>go-client</li>\n</ul>\n<pre><code class=\"language-bash\">response result: User{ID:1, Name:userCode get, Age:48, Time:2021-10-21 20:25:26.009 +0800 CST}\n</code></pre>\n<h3>2.2 Java-Client -&gt; Go-Server</h3>\n<h4>Go-Server 启动</h4>\n<ol>\n<li>定义配置文件</li>\n</ol>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">registries:</span>\n    <span class=\"hljs-attr\">demoZK:</span>\n      <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">zookeeper</span>\n      <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">3s</span>\n      <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:2181</span>\n  <span class=\"hljs-attr\">protocols:</span>\n    <span class=\"hljs-attr\">dubbo:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dubbo</span>\n      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">20000</span>\n  <span class=\"hljs-attr\">provider:</span>\n    <span class=\"hljs-attr\">registryIDs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">demoZK</span>\n    <span class=\"hljs-attr\">services:</span>\n      <span class=\"hljs-attr\">UserProvider:</span>\n        <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">dubbo</span> <span class=\"hljs-comment\"># 或者改成 tri, 下一行增加 serialization: hessian2</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">org.apache.dubbo.UserProvider</span>\n  <span class=\"hljs-attr\">logger:</span>\n    <span class=\"hljs-attr\">zap-config:</span>\n      <span class=\"hljs-attr\">level:</span> <span class=\"hljs-string\">info</span>\n</code></pre>\n<ol start=\"2\">\n<li>引入传输结构，定义服务以及方法名映射</li>\n</ol>\n<pre><code class=\"language-go\">\n<span class=\"hljs-keyword\">type</span> UserProvider <span class=\"hljs-keyword\">struct</span> {\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(u *UserProvider)</span> <span class=\"hljs-title\">GetUser</span><span class=\"hljs-params\">(ctx context.Context, req <span class=\"hljs-keyword\">int32</span>)</span> <span class=\"hljs-params\">(*User, error)</span></span> {\n\t<span class=\"hljs-keyword\">var</span> err error\n\tlogger.Infof(<span class=\"hljs-string\">\"req:%#v\"</span>, req)\n\tuser := &amp;User{}\n\tuser.ID = strconv.Itoa(<span class=\"hljs-keyword\">int</span>(req))\n\t<span class=\"hljs-keyword\">return</span> user, err\n}\n\n<span class=\"hljs-comment\">// MethodMapper 定义方法名映射，从 Go 的方法名映射到 Java 小写方法名，只有 dubbo 协议服务接口才需要使用</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *UserProvider)</span> <span class=\"hljs-title\">MethodMapper</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">map</span>[<span class=\"hljs-title\">string</span>]<span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">string</span>{\n\t\t<span class=\"hljs-string\">\"GetUser\"</span>: <span class=\"hljs-string\">\"getUser\"</span>,\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span>{\n  config.SetProviderService(&amp;pkg.UserProvider{})\n}\n\n</code></pre>\n<ol start=\"3\">\n<li>启动服务</li>\n</ol>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// export DUBBO_GO_CONFIG_PATH=dubbogo.yml</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-keyword\">if</span> err := config.Load(); err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\t<span class=\"hljs-keyword\">select</span> {}\n}\n</code></pre>\n<h4>Java-Client 启动</h4>\n<ol>\n<li>\n<p>Java 客户端 Spring 配置</p>\n<p>resources/META-INF.spring/dubbo.consumer.xml</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-comment\">&lt;!--\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n\t<span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n\t<span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://code.alibabatech.com/schema/dubbo\"</span>\n\t<span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n\thttp://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n\n\n\t<span class=\"hljs-comment\">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"user-info-client\"</span> /&gt;</span>\n\t<span class=\"hljs-comment\">&lt;!-- 连接到哪个本地注册中心 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"dubbogo\"</span>  <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span> /&gt;</span>\n\t<span class=\"hljs-comment\">&lt;!-- dubbo.registry.address from dubbo.properties --&gt;</span>\n\t<span class=\"hljs-comment\">&lt;!-- dubbo:registry address=\"${dubbo.registry.address}\" / --&gt;</span>\n\n\t<span class=\"hljs-comment\">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> /&gt;</span>\n\n\t<span class=\"hljs-comment\">&lt;!-- 声明需要使用的服务接口 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">registry</span>=<span class=\"hljs-string\">\"dubbogo\"</span> <span class=\"hljs-attr\">check</span>=<span class=\"hljs-string\">\"false\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"userProvider\"</span> <span class=\"hljs-attr\">protocol</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span>&gt;</span>\n\t\t<span class=\"hljs-comment\">&lt;!--&lt;dubbo:parameter key=\"heartbeat\" value=\"10000\"/ --&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dubbo:reference</span>&gt;</span>\n\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">registry</span>=<span class=\"hljs-string\">\"dubbogo\"</span> <span class=\"hljs-attr\">check</span>=<span class=\"hljs-string\">\"false\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"userProvider1\"</span> <span class=\"hljs-attr\">protocol</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"2.0\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dubbo:reference</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">registry</span>=<span class=\"hljs-string\">\"dubbogo\"</span> <span class=\"hljs-attr\">check</span>=<span class=\"hljs-string\">\"false\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"userProvider2\"</span> <span class=\"hljs-attr\">protocol</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"2.0\"</span> <span class=\"hljs-attr\">group</span>=<span class=\"hljs-string\">\"as\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dubbo:reference</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n\n</code></pre>\n</li>\n<li>\n<p>发起调用</p>\n</li>\n</ol>\n<pre><code class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Consumer</span> </span>{\n    <span class=\"hljs-comment\">// Define a private variable (Required in Spring)</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> UserProvider userProvider;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        ClassPathXmlApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-keyword\">new</span> String[]{<span class=\"hljs-string\">\"META-INF/spring/dubbo.consumer.xml\"</span>});\n        userProvider = (UserProvider)context.getBean(<span class=\"hljs-string\">\"userProvider\"</span>);\n        testGetUser();\n    }\n  \n \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testGetUser</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        User user = userProvider.getUser(<span class=\"hljs-number\">1</span>);\n        System.out.println(user.getId());\n    }\n}\n</code></pre>\n<p>下一章: <a href=\"./config-center-dynamic.html\">【配置中心和配置监听】</a></p>\n",
  "link": "/zh-cn/docs/user/samples/go_java_interactive.html",
  "meta": {
    "title": "go-java 3.0 互通示例",
    "keywords": "go-java 3.0 互通示例",
    "description": "go-java 3.0 互通示例"
  }
}