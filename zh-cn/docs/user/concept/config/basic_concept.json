{
  "filename": "basic_concept.md",
  "__html": "<h1>基本概念</h1>\n<h2>1. 框架配置</h2>\n<p>Dubbo-go 框架需要依赖配置进行启动。配置中包含了开发者希望使用框架的各种能力。</p>\n<h3>配置格式</h3>\n<p>yaml</p>\n<h3>配置路径</h3>\n<p>默认从 <code>../conf/dubbogo.yaml</code> 加载框架配置</p>\n<p>可通过指定环境变量：DUBBO_GO_CONFIG_PATH=$(your_config_path)/dubbogo.yaml 来修改配置文件路径。</p>\n<h3>配置根结构</h3>\n<p>位于 <a href=\"https://github.com/apache/dubbo-go/blob/e00cf8d6fb2be3cd9c6e42cc3d6efa54e10229d3/config/root_config.go#L50\">dubbo.apache.org/dubbo-go/v3/config/root_config.go: RootConfig</a></p>\n<p>框架加载时，任何形式的配置都会被解析成 RootConfig，在 RootConfig.Init 方法中加载。</p>\n<h2>2. 配置API</h2>\n<p>开发者可以使用 API 的形式构建配置，从而启动框架。该方法较适合 dubbo-go 作为第三方组件引入的情况。</p>\n<p>详情见任务<a href=\"../../tasks/config/config_api.html\">【配置API】</a></p>\n<h2>3. 配置中心</h2>\n<p>开发者可以将配置放置在配置中心，从而便于配置的管理和修改。</p>\n<p>详情见任务<a href=\"../../tasks/config/remote_config.html\">【远程配置】</a></p>\n<p>下一章：<a href=\"../mesh/proxyless_service_mesh.html\">【无代理服务网格】</a></p>\n",
  "link": "/zh-cn/docs/user/concept/config/basic_concept.html",
  "meta": {
    "title": "基本概念",
    "keywords": "基本概念",
    "description": "基本概念"
  }
}