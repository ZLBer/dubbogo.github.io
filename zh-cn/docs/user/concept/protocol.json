{
  "filename": "protocol.md",
  "__html": "<h1>网络协议</h1>\n<h2>1. 网络协议是什么</h2>\n<p>对于 Dubbogo 微服务框架，网络协议为远程过程调用中负责网络通信的模块，负责应用层到网络层的数据序列化、打包、请求发起、网络端口监听等功能。Dubbogo 为协议抽象了一套接口如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> Protocol <span class=\"hljs-keyword\">interface</span> {\n\t<span class=\"hljs-comment\">// Export service for remote invocation</span>\n\tExport(invoker Invoker) Exporter\n\t<span class=\"hljs-comment\">// Refer a remote service</span>\n\tRefer(url *common.URL) Invoker\n\t<span class=\"hljs-comment\">// Destroy will destroy all invoker and exporter, so it only is called once.</span>\n\tDestroy()\n}\n</code></pre>\n<p>该接口包含三个方法。其中 Export 方法负责服务的暴露过程。入参 invoker 为dubbo 的概念，其封装了一个可以被调用的实例。在具体网络协议（例如Triple）实现的 Export 方法中，会针对特定的协议，将封装有一定逻辑的可调用实例 Invoker 以网络端口监听的形式暴露给外部服务，来自外部针对该网络端口的请求将会被 Export 方法开启的监听协程获取，进而根据网络协议进行拆解包和反序列化，得到解析后的请求数据。</p>\n<p>Refer 方法负责服务的引用过程，其入参 url 为 dubbo 框架通用的结构，可以描述一个希望引用的服务，url 参数中包含了多个希望引用服务的参数，例如对应服务的接口名(interface)，版本号(version)，使用协议(protocol) 等等。在具体网络协议（例如Triple）实现的 Refer 方法中，会将特定的网络协议封装到 Invoker 可调用实例的方法中，用户层发起的 RPC 调用即可直接通过返回的 Invoker 对象，发起特定协议的网络请求。</p>\n<p>Destroy 方法作用为销毁当前暴露的服务，用于服务下线场景。Dubbogo 框架有优雅下线机制，可以在服务进程终止前以监听信号的形式，下线所有已启动的服务。</p>\n<h2>2. Dubbogo 3.0 支持的网络协议</h2>\n<p>Dubbogo 3.0 版本支持的网络协议和序列化方式如下：</p>\n<table>\n<thead>\n<tr>\n<th>协议</th>\n<th>协议名 (用于配置)</th>\n<th style=\"text-align:center\">序列化方式</th>\n<th>默认序列化方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Triple</td>\n<td>tri</td>\n<td style=\"text-align:center\">pb hessian2 msgpack custome</td>\n<td>pb</td>\n</tr>\n<tr>\n<td>Dubbo</td>\n<td>dubbbo</td>\n<td style=\"text-align:center\">hessian2</td>\n<td>hessian2</td>\n</tr>\n<tr>\n<td>gRPC</td>\n<td>grpc</td>\n<td style=\"text-align:center\">pb</td>\n<td>pb</td>\n</tr>\n<tr>\n<td>jsonRPC</td>\n<td>jsonrpc</td>\n<td style=\"text-align:center\">json</td>\n<td>json</td>\n</tr>\n</tbody>\n</table>\n<h2>3. 如何配置网络协议</h2>\n<p>在快速开始章节可以看到，在配置的过程中将 Protocol 设置为 tri，表明使用 Triple 协议进行服务暴露和服务调用。快速开始章节使用的配置 API 进行配置的写入，这样的好处是无需使用配置文件。我们摘取出和网络协议相关的内容进行说明。</p>\n<h3>使用配置 API</h3>\n<ul>\n<li>客户端使用配置 API 设置网络协议</li>\n</ul>\n<pre><code class=\"language-go\">rc := config.NewRootConfigBuilder().\n    SetConsumer(config.NewConsumerConfigBuilder().\n        AddReference(<span class=\"hljs-string\">\"GreeterClientImpl\"</span>, config.NewReferenceConfigBuilder().\n            SetInterface(<span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span>).\n            SetProtocol(<span class=\"hljs-string\">\"tri\"</span>). <span class=\"hljs-comment\">// set reference protcol to triple</span>\n            Build()).\n        Build()).\n    Build()\n</code></pre>\n<ul>\n<li>服务端使用配置 API 设置网络协议</li>\n</ul>\n<pre><code class=\"language-go\">rc := config.NewRootConfigBuilder().\n    SetProvider(config.NewProviderConfigBuilder().\n        AddService(<span class=\"hljs-string\">\"GreeterProvider\"</span>, config.NewServiceConfigBuilder().\n            SetInterface(<span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span>).\n            SetProtocolIDs(<span class=\"hljs-string\">\"tripleProtocolKey\"</span>). <span class=\"hljs-comment\">// use protocolID 'tripleProtocolKey'</span>\n            Build()).\n        Build()).\n    AddProtocol(<span class=\"hljs-string\">\"tripleProtocolKey\"</span>, config.NewProtocolConfigBuilder(). <span class=\"hljs-comment\">// define protocol config with protocolID 'tripleProtocolKey'</span>\n        SetName(<span class=\"hljs-string\">\"tri\"</span>). <span class=\"hljs-comment\">// set service protocol to triple</span>\n        Build()).\n    Build()\n</code></pre>\n<h3>使用配置文件</h3>\n<p>参考 samples/helloworld</p>\n<ul>\n<li>客户端使用配置文件设置网络协议</li>\n</ul>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">consumer:</span>\n    <span class=\"hljs-attr\">references:</span>\n      <span class=\"hljs-attr\">GreeterClientImpl:</span>\n        <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">tri</span> <span class=\"hljs-comment\"># set protcol to tri</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">com.apache.dubbo.sample.basic.IGreeter</span> \n</code></pre>\n<ul>\n<li>服务端使用配置文件设置网络协议</li>\n</ul>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">protocols:</span>\n    <span class=\"hljs-attr\">triple:</span> <span class=\"hljs-comment\"># define protcol-id 'triple'</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">tri</span> <span class=\"hljs-comment\"># set protcol to tri</span>\n      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">20000</span> <span class=\"hljs-comment\"># set port to be listened</span>\n  <span class=\"hljs-attr\">provider:</span>\n    <span class=\"hljs-attr\">services:</span>\n      <span class=\"hljs-attr\">GreeterProvider:</span>\n        <span class=\"hljs-attr\">protocol-ids:</span> <span class=\"hljs-string\">triple</span> <span class=\"hljs-comment\"># use protocol-ids named 'triple'</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">com.apache.dubbo.sample.basic.IGreeter</span>\n</code></pre>\n<p>下一章：<a href=\"./registry.html\">【注册中心】</a></p>\n",
  "link": "/zh-cn/docs/user/concept/protocol.html",
  "meta": {
    "title": "Dubbo的网络协议",
    "keywords": "基本概念",
    "description": "Dubbo的网络协议"
  }
}