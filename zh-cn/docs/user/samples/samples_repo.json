{
  "filename": "samples_repo.md",
  "__html": "<p>为了方便 Dubbogo 框架用户的使用，我们提供了 Samples 仓库以供用户参考：</p>\n<p><a href=\"https://github.com/apache/dubbo-go-samples\">【Dubbo-go-samples 仓库地址】</a></p>\n<h2>1. Samples 仓库包含的例子</h2>\n<ul>\n<li>config-api: 使用 API 进行配置初始化</li>\n<li>configcenter: 使用不同的配置中心，目前支持三种：zookeeper、apollo、和 nacos</li>\n<li>context: 如何使用上下文传递 attachment</li>\n<li>direct: 直连模式</li>\n<li>game: 游戏服务例子</li>\n<li>generic: 泛化调用</li>\n<li>rpc: RPC 调用例子, 包含 Triple、Dubbo等协议以及跨语言/gRPC互通示例</li>\n<li>helloworld: RPC调用入门例子</li>\n<li>logger: 日志例子</li>\n<li>registry: 展示与不同注册中心的对接，包含了 zk、nacos、etcd</li>\n<li>metrics: 数据上报</li>\n<li>filter: 使用提供filter和自定义filter的例子</li>\n<li>registry/servicediscovery：应用级服务发现例子</li>\n<li>router: 路由例子</li>\n<li>tracing: 链路追踪例子</li>\n</ul>\n<h2>2. 如何运行</h2>\n<p>目前有三种方式来运行 dubbo-go 的示例:</p>\n<ol>\n<li>通过 bash 命令快速开始: 通过简单的命令行启动样例以及进行单元测试</li>\n<li>在 IDE 中快速开始，这也是<strong>推荐</strong>的方式: 在工程 &quot;.run&quot; 子目录下，提供了所有示例的 GoLand 运行配置文件，因此用户可以简单在 IDE 中单击运行所有的示例。</li>\n<li>在 IDE 中手工配置并运行: 为了完整性的目的，也为了万一您不使用 GoLand 而使用其他的 IDE，这里也提供了如何一步一步的配置的指南，帮助用户理解如何在 IDE 中配置，运行或者调试 dubbo-go 的示例。</li>\n</ol>\n<h3>2.1 通过 命令行 快速开始</h3>\n<p><em>前置条件：需要 docker 环境就绪</em></p>\n<p>下面我们将使用 &quot;helloworld&quot; 作为示例:</p>\n<ol>\n<li>\n<p><strong>启动注册中心（比如 zookeeper）</strong></p>\n<pre><code class=\"language-bash\">make -f build/Makefile docker-up \n</code></pre>\n<p>当看到类似下面的输出信息时，就表明 zookeeper server 启动就绪了。</p>\n<pre><code class=\"language-bash\">&gt;  Starting dependency services with ./integrate_test/dockercompose/docker-compose.yml\nDocker Compose is now <span class=\"hljs-keyword\">in</span> the Docker CLI, try `docker compose up`\n\nCreating network <span class=\"hljs-string\">\"dockercompose_default\"</span> with the default driver\nCreating dockercompose_zookeeper_1 ... <span class=\"hljs-keyword\">done</span>\nCreating etcd                      ... <span class=\"hljs-keyword\">done</span>\nCreating nacos-standalone          ... <span class=\"hljs-keyword\">done</span>\n</code></pre>\n<p>如果要停掉注册中心，可以通过运行以下的命令完成:</p>\n<pre><code class=\"language-bash\">make -f build/Makefile docker-down\n</code></pre>\n</li>\n<li>\n<p><strong>启动服务提供方</strong></p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> helloworld/go-server/cmd\n<span class=\"hljs-built_in\">export</span> DUBBO_GO_CONFIG_PATH=<span class=\"hljs-string\">\"../conf/dubbogo.yml\"</span>\ngo run .\n</code></pre>\n<p>当看到类似下面的输出信息时，就表明服务提供方启动就绪了。</p>\n<pre><code class=\"language-bash\">2021/10/27 00:33:10 Connected to 127.0.0.1:2181\n2021/10/27 00:33:10 Authenticated: id=72057926938066944, timeout=10000\n2021/10/27 00:33:10 Re-submitting `0` credentials after reconnect\n</code></pre>\n</li>\n<li>\n<p><strong>运行服务调用方</strong></p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> helloworld/go-client/cmd\n<span class=\"hljs-built_in\">export</span> DUBBO_GO_CONFIG_PATH=<span class=\"hljs-string\">\"../conf/dubbogo.yml\"</span>\ngo run .\n</code></pre>\n<p>当以下的信息输出时，说明 <code>go-client</code> 调用 <code>go-server</code> 成功。</p>\n<pre><code class=\"language-bash\">2021-10-27T00:40:44.879+0800    DEBUG   triple/dubbo3_client.go:106     TripleClient.Invoke: get reply = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"12345\"</span> age:21 \n2021-10-27T00:40:44.879+0800    DEBUG   proxy/proxy.go:218      [makeDubboCallProxy] result: name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"12345\"</span> age:21 , err: &lt;nil&gt;\n2021-10-27T00:40:44.879+0800    INFO    cmd/client.go:51        client response result: name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"12345\"</span> age:21\n</code></pre>\n</li>\n<li>\n<p><strong>集成测试</strong>\n本项目 dubbo-go-samples 除了用来展示如何使用 dubbo-go 中的功能和特性之外，还被用于 apache/dubbo-go 的集成测试。可以按照以下的步骤来运行针对 <code>go-server</code> 设计的集成测试:</p>\n<p>首先启动服务方</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> helloworld/go-server/cmd\n<span class=\"hljs-built_in\">export</span> DUBBO_GO_CONFIG_PATH=<span class=\"hljs-string\">\"../conf/dubbogo.yml\"</span>\ngo run .\n</code></pre>\n<p>然后切换到单测目录， 设置环境变量，然后执行单测</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> integrate_test/helloworld/tests/integration\n<span class=\"hljs-built_in\">export</span> DUBBO_GO_CONFIG_PATH=<span class=\"hljs-string\">\"../../../../helloworld/go-client/conf/dubbogo.yml\"</span>\ngo <span class=\"hljs-built_in\">test</span> -v\n</code></pre>\n<p>当以下信息输出时，说明集成测试通过。</p>\n<pre><code class=\"language-bash\">&gt;  Running integration <span class=\"hljs-built_in\">test</span> <span class=\"hljs-keyword\">for</span> application go-server\n...\n--- PASS: TestSayHello (0.01s)\nPASS\nok      github.com/apache/dubbo-go-samples/integrate_test/helloworld/tests/integration  0.119s\n</code></pre>\n</li>\n<li>\n<p><strong>关闭并清理</strong></p>\n<pre><code class=\"language-bash\">make -f build/Makefile clean docker-down\n</code></pre>\n</li>\n</ol>\n<p><em>以下的两种运行方式都与 IDE 有关。这里我们以 Intellij GoLand 为例来讨论。</em></p>\n<h3>2.2 在 IDE 中快速开始</h3>\n<p>一旦在 GoLand 中打开本项目，可以发现，在 &quot;Run Configuration&quot; 弹出菜单中已经存在了一系列事先配置好了的用来运行相关服务提供方和调用方的选项，例如：&quot;helloworld-go-server&quot; 和 &quot;helloworld-go-client&quot;。</p>\n<p>可以选择其中的任意一个快速启动相关示例。当然在运行之前，假设需要的注册中心已经事先启动了，不然用例将会失败。您可以选择手动自行启动的方式，也可以利用工程中提供的 &quot;docker-compose.yml&quot; 在启动注册中心的 docker 实例。选择后者的话，可以参考<a href=\"#3-manually-run-in-ide\">第三种方式</a>中的细节。</p>\n<h3>2.3.在 IDE 中手工运行</h3>\n<p>这里以 <em>Intellij GoLand</em> 为例。在 GoLand 中打开 dubbo-go-samples 工程之后，按照以下的步骤来运行/调试本示例:</p>\n<ol>\n<li>\n<p><strong>启动 zookeeper 服务器</strong></p>\n<p>打开 &quot;integrate_test/dockercompose/docker-compose.yml&quot; 这个文件，然后点击位于编辑器左边 gutter 栏位中的 ▶︎▶︎ 图标运行，&quot;Service&quot; Tab 应当会弹出并输出类似下面的文本信息:</p>\n<pre><code>Deploying 'Compose: docker'...\n/usr/local/bin/docker-compose -f ...integrate_test/dockercompose/docker-compose.yml up -d\nCreating network &quot;docker_default&quot; with the default driver\nCreating docker_zookeeper_1 ...\n'Compose: docker' has been deployed successfully.\n</code></pre>\n</li>\n<li>\n<p><strong>启动服务提供方</strong></p>\n<p>打开 &quot;helloworld/go-server/cmd/server.go&quot; 文件，然后点击左边 gutter 栏位中紧挨着 &quot;main&quot; 函数的 ▶︎ 图标，并从弹出的菜单中选择 &quot;Modify Run Configuration...&quot;，并确保以下配置的准确:</p>\n<ul>\n<li>Working Directory: &quot;helloworld/go-server&quot; 目录的绝对路径，比如： <em>/home/dubbo-go-samples/helloworld/go-server</em></li>\n<li>Environment: DUBBO_GO_CONFIG_PATH=&quot;../conf/dubbogo.yml&quot;</li>\n</ul>\n<p>这样示例中的服务端就准备就绪，随时可以运行了。</p>\n</li>\n<li>\n<p><strong>运行服务消费方</strong></p>\n<p>打开 &quot;helloworld/go-client/cmd/client.go&quot; 这个文件，然后从左边 gutter 栏位中点击紧挨着 &quot;main&quot; 函数的 ▶︎ 图标，然后从弹出的菜单中选择 &quot;Modify Run Configuration...&quot;，并确保以下配置的准确:</p>\n<ul>\n<li>Working Directory: &quot;helloworld/go-client&quot; 目录的绝对路径，比如： <em>/home/dubbo-go-samples/helloworld/go-client</em></li>\n<li>Environment: DUBBO_GO_CONFIG_PATH=&quot;../conf/dubbogo.yml&quot;</li>\n</ul>\n<p>然后就可以运行并调用远端的服务了，如果调用成功，将会有以下的输出:</p>\n<pre><code>[2021-02-03/16:19:30 main.main: client.go: 66] response result: &amp;{A001 Alex Stocks 18 2020-02-04 16:19:30.422 +0800 CST}\n</code></pre>\n</li>\n</ol>\n<p>如果需要调试该示例或者 dubbo-go 框架，可以在 IDE 中从 &quot;Run&quot; 切换到 &quot;Debug&quot;。如果要结束的话，直接点击 ◼︎ 就好了。</p>\n",
  "link": "/zh-cn/docs/user/samples/samples_repo.html",
  "meta": {
    "title": "dubbo-go 3.0 示例仓库",
    "keywords": "dubbo-go 3.0 示例仓库",
    "description": "dubbo-go 3.0 示例仓库"
  }
}