{
  "filename": "registry.md",
  "__html": "<h1>注册中心</h1>\n<p>Dubbogo 为注册中心抽象了一套接口如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// Registry Extension - Registry</span>\n<span class=\"hljs-keyword\">type</span> Registry <span class=\"hljs-keyword\">interface</span> {\n\tcommon.Node\n\n\t<span class=\"hljs-comment\">// Register is used for service provider calling, register services</span>\n\t<span class=\"hljs-comment\">// to registry. And it is also used for service consumer calling, register</span>\n\t<span class=\"hljs-comment\">// services cared about, for dubbo's admin monitoring.</span>\n\tRegister(url *common.URL) error\n\n\t<span class=\"hljs-comment\">// UnRegister is required to support the contract:</span>\n\t<span class=\"hljs-comment\">// 1. If it is the persistent stored data of dynamic=false, the</span>\n\t<span class=\"hljs-comment\">//    registration data can not be found, then the IllegalStateException</span>\n\t<span class=\"hljs-comment\">//    is thrown, otherwise it is ignored.</span>\n\t<span class=\"hljs-comment\">// 2. Unregister according to the full url match.</span>\n\t<span class=\"hljs-comment\">// url Registration information, is not allowed to be empty, e.g:</span>\n\t<span class=\"hljs-comment\">// dubbo://10.20.153.10/org.apache.dubbo.foo.BarService?version=1.0.0&amp;application=kylin</span>\n\tUnRegister(url *common.URL) error\n\n\t<span class=\"hljs-comment\">// Subscribe is required to support the contract:</span>\n\t<span class=\"hljs-comment\">// When creating new registry extension, pls select one of the</span>\n\t<span class=\"hljs-comment\">// following modes.</span>\n\t<span class=\"hljs-comment\">// Will remove in dubbogo version v1.1.0</span>\n\t<span class=\"hljs-comment\">// mode1: return Listener with Next function which can return</span>\n\t<span class=\"hljs-comment\">//        subscribe service event from registry</span>\n\t<span class=\"hljs-comment\">// Deprecated!</span>\n\t<span class=\"hljs-comment\">// subscribe(event.URL) (Listener, error)</span>\n\t<span class=\"hljs-comment\">// Will replace mode1 in dubbogo version v1.1.0</span>\n\t<span class=\"hljs-comment\">// mode2: callback mode, subscribe with notify(notify listener).</span>\n\tSubscribe(*common.URL, NotifyListener) error\n\n\t<span class=\"hljs-comment\">// UnSubscribe is required to support the contract:</span>\n\t<span class=\"hljs-comment\">// 1. If don't subscribe, ignore it directly.</span>\n\t<span class=\"hljs-comment\">// 2. Unsubscribe by full URL match.</span>\n\t<span class=\"hljs-comment\">// url Subscription condition, not allowed to be empty, e.g.</span>\n\t<span class=\"hljs-comment\">// consumer://10.20.153.10/org.apache.dubbo.foo.BarService?version=1.0.0&amp;application=kylin</span>\n\t<span class=\"hljs-comment\">// listener A listener of the change event, not allowed to be empty</span>\n\tUnSubscribe(*common.URL, NotifyListener) error\n}\n</code></pre>\n<p>该接口主要包含四个方法，分别是注册、反注册、订阅、取消订阅。顾名思义，概括了客户端和服务端与注册中心交互的动作。针对普通接口级服务注册发现场景，在Provider 服务启动时，会将自身服务接口信息抽象为一个 url，该 url 包含了客户端发起调用所需的所有信息（ip、端口、协议等），服务端的注册中心组件会将该 url 写入注册中心（例如zk）。客户端启动后，在服务引用 Refer 步骤会通过注册中心组件订阅（Subscribe）需要的服务信息，获取到的服务信息以异步事件更新的形式写入客户端缓存，从而在服务发现成功后，可以根据拿到的服务 url 参数，向对应服务提供者发起调用。</p>\n<h2></h2>\n",
  "link": "/zh-cn/docs/user/sourcecode/registry.html",
  "meta": {
    "title": "注册中心源码",
    "keywords": "注册中心源码",
    "description": "注册中心源码"
  }
}