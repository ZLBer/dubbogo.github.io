{
  "filename": "3.0_feature.md",
  "__html": "<h1>Dubbo-go 3.0 新特性介绍</h1>\n<p><img src=\"https://shields.io/github/stars/apache/dubbo-go?style=dark\" alt=\"star\"></p>\n<h2>1. Triple 协议</h2>\n<h3>1.1 概述</h3>\n<p><img src=\"../../pic/3.0/tri.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>通信层面</p>\n<p>Triple 协议，也称为Dubbo3协议，是基于HTTP2 + gRPC协议，增加特定字段和逻辑的扩展协议，保证了和<strong>原生gRPC协议互通</strong>。在此基础之上，Triple 新协议将更原生地支持 <strong>Dubbo 服务治理能力</strong>。并支持<strong>流式RPC调用</strong>。</p>\n<p>简单来说，可以理解为 Triple-go = gRPC-go + Dubbo-go</p>\n</li>\n<li>\n<p>序列化层面</p>\n<p>Triple 协议使用高效的<strong>PB序列化方式</strong>，并在此基础之上增加序列化协议的<strong>可扩展支持</strong>。</p>\n</li>\n<li>\n<p>用户开发习惯：</p>\n<p>Triple 服务在开发前需要<strong>预定义.proto文件</strong>，对于习惯在编码前先定义IDL的Go语言开发者带来便捷。不同于符合java编程习惯的，定义JavaClassName用于描述接口的 Dubbo-go 1.x版本。</p>\n</li>\n<li>\n<p>跨语言互通性：</p>\n<p>可与 Dubbo-Java 3.0 实现<strong>跨语言互通</strong>。</p>\n</li>\n</ul>\n<h3>1.2 Triple 协议头字段</h3>\n<ul>\n<li>\n<p>Http2协议头扩展字段设计</p>\n<ul>\n<li>\n<p>请求头</p>\n<p>tri-service-version: dubbo 应用版本号</p>\n<p>tri-service-group: dubbo 应用 group 名</p>\n<p>tri-req-id: 请求id</p>\n<p>tri-trace-traceid: trace id</p>\n<p>tri-trace-rpcid: span id</p>\n<p>tri-trace-proto-bin: trace 上下文二进制信息</p>\n<p>tri-unit-info: 集群信息</p>\n</li>\n<li>\n<p>返回头（trailer 返回头字段）</p>\n<p>grpc-status: 请求状态码，</p>\n<p>grpc-message: 报错信息</p>\n<p>trace-proto-bin: trace 二进制信息</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3>1.3 Triple-go 网络库</h3>\n<p>Triple-go 是基于Triple协议开发的网络库。与 Dubbo-go 项目解耦。其依赖经过修改的Go 语言 net/http 网络库，本身被 Dubbo-go 3.0 依赖。</p>\n<p><img src=\"../../pic/3.0/tri-dubbo-layer.png\" alt=\"\"></p>\n<p><a href=\"https://github.com/dubbogo/triple\">【Triple-go 项目 on github】</a></p>\n<p><a href=\"https://github.com/dubbogo/triple/blob/master/docs/README_zh.md\">【Triple-go 接口文档】</a></p>\n<h2>2. 应用级服务发现</h2>\n<h3>2.1 简介</h3>\n<p><img src=\"../../pic/3.0/disc.png\" alt=\"\"></p>\n<p>在服务注册阶段，服务端实例将应用级别的注册信息，主要包含从应用名到实例IP的映射注册到注册中心。在服务发现阶段，客户端实例，通过注册中心获取到需要请求的服务实例IP。进入服务自省阶段，服务自省过程为通过应用信息获取接口信息的过程。如上图，包含两种模式：</p>\n<ol>\n<li>remote模式：通过元数据中心（例如 zk ）获取应用到接口元数据的映射</li>\n<li>local模式：直接通过服务端获取应用到接口元数据的映射（通过 Dubbo 协议针对 Metadata  Service 发起 RPC 调用）</li>\n</ol>\n<p>经过服务自省后，客户端正式向对应实例发起调用。这样做最明显的好处是减少了注册中心的数据量，即注册中心只保存了应用级别的数据。</p>\n<p>用户在使用 Dubbo-go 3.0的应用级服务发现能力时，可以仿照示例，直接在配置文件中配置服务自省模式和元数据中心信息，引入依赖，开启应用级别服务发现。</p>\n<h3>2.2 应用级服务发现介绍文章</h3>\n<p><a href=\"https://baijiahao.baidu.com/s?id=1669266413887039723&amp;wfr=spider&amp;for=pc\">应用级服务发现解析</a></p>\n<h2>3. Mesh 路由由规则</h2>\n<p>用户可定义路由文件：</p>\n<p>virtual_service.yaml</p>\n<p><img src=\"../../pic/3.0/virtual_service.png\" alt=\"\"></p>\n<p>以及 dist_rule.yml</p>\n<p><img src=\"../../pic/3.0/dest_rule.png\" alt=\"\"></p>\n<p>框架可根据路由文件针对特定的请求进行流量转发。</p>\n<h2>4. 相关文章</h2>\n<p>阿里云官方介绍文章：<a href=\"https://developer.aliyun.com/article/770964?utm_content=g_1000175535\">《Dubbo 3.0 - 开启下一代云原生微服务》</a></p>\n<p>下一章：<a href=\"../quickstart/3.0/quickstart.html\">【快速开始】</a></p>\n",
  "link": "/zh-cn/docs/user/preface/3.0_feature.html",
  "meta": {
    "title": "dubbo-go 3.0 新特性",
    "keywords": "dubbo-go 3.0 新特性",
    "description": "dubbo-go 3.0 新特性的介绍"
  }
}