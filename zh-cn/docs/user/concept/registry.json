{
  "filename": "registry.md",
  "__html": "<h1>注册中心</h1>\n<h2>1. Dubbo 的注册中心是什么</h2>\n<p>对于 Dubbogo 微服务框架，注册中心在 RPC 场景下复杂保存 Provider 应用的服务信息。Provider 注册地址到注册中心，Consumer 从注册中心读取和订阅 Provider 地址列表。如图所示：</p>\n<p><img src=\"https://dubbo.apache.org/imgs/architecture.png\" alt=\"\"></p>\n<p>关于 Dubbo 服务发现细节，详情可参考 <a href=\"https://dubbo.apache.org/zh/docs/concepts/service-discovery/\">Dubbo 官网的概念介绍</a></p>\n<p>Dubbogo 为注册中心抽象了一套接口如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// Registry Extension - Registry</span>\n<span class=\"hljs-keyword\">type</span> Registry <span class=\"hljs-keyword\">interface</span> {\n\tcommon.Node\n\n\t<span class=\"hljs-comment\">// Register is used for service provider calling, register services</span>\n\t<span class=\"hljs-comment\">// to registry. And it is also used for service consumer calling, register</span>\n\t<span class=\"hljs-comment\">// services cared about, for dubbo's admin monitoring.</span>\n\tRegister(url *common.URL) error\n\n\t<span class=\"hljs-comment\">// UnRegister is required to support the contract:</span>\n\t<span class=\"hljs-comment\">// 1. If it is the persistent stored data of dynamic=false, the</span>\n\t<span class=\"hljs-comment\">//    registration data can not be found, then the IllegalStateException</span>\n\t<span class=\"hljs-comment\">//    is thrown, otherwise it is ignored.</span>\n\t<span class=\"hljs-comment\">// 2. Unregister according to the full url match.</span>\n\t<span class=\"hljs-comment\">// url Registration information, is not allowed to be empty, e.g:</span>\n\t<span class=\"hljs-comment\">// dubbo://10.20.153.10/org.apache.dubbo.foo.BarService?version=1.0.0&amp;application=kylin</span>\n\tUnRegister(url *common.URL) error\n\n\t<span class=\"hljs-comment\">// Subscribe is required to support the contract:</span>\n\t<span class=\"hljs-comment\">// When creating new registry extension, pls select one of the</span>\n\t<span class=\"hljs-comment\">// following modes.</span>\n\t<span class=\"hljs-comment\">// Will remove in dubbogo version v1.1.0</span>\n\t<span class=\"hljs-comment\">// mode1: return Listener with Next function which can return</span>\n\t<span class=\"hljs-comment\">//        subscribe service event from registry</span>\n\t<span class=\"hljs-comment\">// Deprecated!</span>\n\t<span class=\"hljs-comment\">// subscribe(event.URL) (Listener, error)</span>\n\t<span class=\"hljs-comment\">// Will replace mode1 in dubbogo version v1.1.0</span>\n\t<span class=\"hljs-comment\">// mode2: callback mode, subscribe with notify(notify listener).</span>\n\tSubscribe(*common.URL, NotifyListener) error\n\n\t<span class=\"hljs-comment\">// UnSubscribe is required to support the contract:</span>\n\t<span class=\"hljs-comment\">// 1. If don't subscribe, ignore it directly.</span>\n\t<span class=\"hljs-comment\">// 2. Unsubscribe by full URL match.</span>\n\t<span class=\"hljs-comment\">// url Subscription condition, not allowed to be empty, e.g.</span>\n\t<span class=\"hljs-comment\">// consumer://10.20.153.10/org.apache.dubbo.foo.BarService?version=1.0.0&amp;application=kylin</span>\n\t<span class=\"hljs-comment\">// listener A listener of the change event, not allowed to be empty</span>\n\tUnSubscribe(*common.URL, NotifyListener) error\n}\n</code></pre>\n<p>该接口主要包含四个方法，分别是注册、反注册、订阅、取消订阅。顾名思义，概括了客户端和服务端与注册中心交互的动作。针对普通接口级服务注册发现场景，在Provider 服务启动时，会将自身服务接口信息抽象为一个 url，该 url 包含了客户端发起调用所需的所有信息（ip、端口、协议等），服务端的注册中心组件会将该 url 写入注册中心（例如zk）。客户端启动后，在服务引用 Refer 步骤会通过注册中心组件订阅（Subscribe）需要的服务信息，获取到的服务信息以异步事件更新的形式写入客户端缓存，从而在服务发现成功后，可以根据拿到的服务 url 参数，向对应服务提供者发起调用。</p>\n<h2>2. Dubbogo 3.0 支持的注册中心类型</h2>\n<p>Dubbogo 3.0 版本支持的注册中心类型如下：</p>\n<table>\n<thead>\n<tr>\n<th>注册中心</th>\n<th>注册中心名（用于配置）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Zookeeper</td>\n<td>zookeeper</td>\n</tr>\n<tr>\n<td>Nacos</td>\n<td>nacos</td>\n</tr>\n<tr>\n<td>Etcd</td>\n<td>etcd</td>\n</tr>\n<tr>\n<td>Consul</td>\n<td>consul</td>\n</tr>\n</tbody>\n</table>\n<h2>3. 如何配置注册中心</h2>\n<h3>使用配置 API</h3>\n<ul>\n<li>客户端使用配置 API 设置注册中心</li>\n</ul>\n<p>可通过调用config.NewRegistryConfigWithProtocolDefaultPort方法，快速设置用于调试的注册中心，支持zookeeper(127.0.0.1:2181) 和nacos(127.0.0.1:8848)</p>\n<pre><code class=\"language-go\">rc := config.NewRootConfigBuilder().\n    SetConsumer(config.NewConsumerConfigBuilder().\n        SetRegistryIDs(<span class=\"hljs-string\">\"zookeeperID\"</span>). <span class=\"hljs-comment\">// use defined registryID</span>\n        Build()).\n    AddRegistry(<span class=\"hljs-string\">\"zookeeperID\"</span>, config.NewRegistryConfigWithProtocolDefaultPort(<span class=\"hljs-string\">\"zookeeper\"</span>)).\n    Build()\n</code></pre>\n<p>全部接口：可通过调用RegistryConfigBuilder提供的丰富接口进行配置。</p>\n<pre><code class=\"language-go\">rc := config.NewRootConfigBuilder().\n    SetConsumer(config.NewConsumerConfigBuilder().\n        SetRegistryIDs(<span class=\"hljs-string\">\"nacosRegistryID\"</span>). <span class=\"hljs-comment\">// use defined registryID</span>\n        AddReference(<span class=\"hljs-string\">\"GreeterClientImpl\"</span>,<span class=\"hljs-comment\">/*...*/</span>).\n        Build()\n    AddRegistry(<span class=\"hljs-string\">\"nacosRegistryID\"</span>, config.NewRegistryConfigBuilder().\n        SetProtocol(<span class=\"hljs-string\">\"nacos\"</span>).\n        SetAddress(<span class=\"hljs-string\">\"127.0.0.1:8848\"</span>).\n        SetGroup(<span class=\"hljs-string\">\"dubbo-go\"</span>).\n        SetNamespace(<span class=\"hljs-string\">\"dubbo\"</span>).\n        SetUsername(<span class=\"hljs-string\">\"admin\"</span>).\n        SetPassword(<span class=\"hljs-string\">\"admin\"</span>).\n        SetTimeout(<span class=\"hljs-string\">\"3s\"</span>).\n        Build()).\n    Build()\n</code></pre>\n<ul>\n<li>服务端使用配置 API 设置配置中心</li>\n</ul>\n<p>简易接口 config.NewRegistryConfigWithProtocolDefaultPort</p>\n<pre><code class=\"language-go\">rc := config.NewRootConfigBuilder().\n    SetProvider(config.NewProviderConfigBuilder().\n        AddService(<span class=\"hljs-string\">\"GreeterProvider\"</span>, <span class=\"hljs-comment\">/*...*/</span>).\n        SetRegistryIDs(<span class=\"hljs-string\">\"registryKey\"</span>).  <span class=\"hljs-comment\">// use defined registryID</span>\n        Build()).\n    AddRegistry(<span class=\"hljs-string\">\"registryKey\"</span>, config.NewRegistryConfigWithProtocolDefaultPort(<span class=\"hljs-string\">\"zookeeper\"</span>)).\n    Build()\n</code></pre>\n<p>全部接口：可通过调用RegistryConfigBuilder提供的丰富接口进行配置。</p>\n<pre><code class=\"language-go\">rc := config.NewRootConfigBuilder().\n    SetProvider(config.NewProviderConfigBuilder().\n        AddService(<span class=\"hljs-string\">\"GreeterProvider\"</span>,<span class=\"hljs-comment\">/*...*/</span>)\n        SetRegistryIDs(<span class=\"hljs-string\">\"registryKey\"</span>). <span class=\"hljs-comment\">// use defined registryID</span>\n        Build()).\n    AddRegistry(<span class=\"hljs-string\">\"registryKey\"</span>, config.NewRegistryConfigBuilder().\n        SetProtocol(<span class=\"hljs-string\">\"nacos\"</span>).\n        SetAddress(<span class=\"hljs-string\">\"127.0.0.1:8848\"</span>).\n        SetGroup(<span class=\"hljs-string\">\"dubbo-go\"</span>).\n        SetNamespace(<span class=\"hljs-string\">\"dubbo\"</span>).\n        SetUsername(<span class=\"hljs-string\">\"admin\"</span>).\n        SetPassword(<span class=\"hljs-string\">\"admin\"</span>).\n        SetTimeout(<span class=\"hljs-string\">\"3s\"</span>).\n        Build()).\n    Build()\n</code></pre>\n<h3>使用配置文件</h3>\n<ul>\n<li>客户端/服务端</li>\n</ul>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">registries:</span>\n    <span class=\"hljs-attr\">demoZK:</span> <span class=\"hljs-comment\"># define registry-id 'demoZK'</span>\n      <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">zookeeper</span> <span class=\"hljs-comment\"># set registry protocol</span>\n      <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">3s</span>\n      <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:2181</span>\n  <span class=\"hljs-attr\">protocols:</span>\n    <span class=\"hljs-attr\">triple:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">tri</span>\n      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">20000</span>\n  <span class=\"hljs-attr\">provider:</span>\n    <span class=\"hljs-attr\">registry-ids:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">demoZK</span> <span class=\"hljs-comment\"># use registry-id 'demoZK'</span>\n    <span class=\"hljs-attr\">services:</span>\n      <span class=\"hljs-attr\">GreeterProvider:</span>\n        <span class=\"hljs-attr\">protocol-ids:</span> <span class=\"hljs-string\">triple</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">com.apache.dubbo.sample.basic.IGreeter</span> \n  <span class=\"hljs-attr\">consumer:</span>\n    <span class=\"hljs-attr\">registry-ids:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">demoZK</span> <span class=\"hljs-comment\"># use registry-id 'demoZK'</span>\n    <span class=\"hljs-attr\">references:</span>\n      <span class=\"hljs-attr\">GreeterClientImpl:</span>\n        <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">tri</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">com.apache.dubbo.sample.basic.IGreeter</span> \n</code></pre>\n<p>下一章：<a href=\"./configuration.html\">【框架配置介绍】</a></p>\n",
  "link": "/zh-cn/docs/user/concept/registry.html",
  "meta": {
    "title": "Dubbo的注册中心",
    "keywords": "基本概念",
    "description": "Dubbo的注册中心"
  }
}