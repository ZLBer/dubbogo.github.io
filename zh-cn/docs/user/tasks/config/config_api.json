{
  "filename": "config_api.md",
  "__html": "<h1>使用配置 API 启动应用</h1>\n<h2>1. 准备工作</h2>\n<ul>\n<li>dubbo-go cli 工具和依赖工具已安装</li>\n<li>创建一个新的 demo 应用</li>\n</ul>\n<h2>2. 使用配置 API 启动应用</h2>\n<p>用户无需使用配置文件，可直接在代码中以 API 的调用的形式写入配置</p>\n<h3>2.1 修改服务端代码：</h3>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tconfig.SetProviderService(&amp;GreeterProvider{})\n  \n\tprotocolConfig := config.NewProtocolConfigBuilder().\n\t\tSetPort(<span class=\"hljs-string\">\"20000\"</span>).\n\t\tSetName(<span class=\"hljs-string\">\"tri\"</span>).\n\t\tBuild()\n  \n\tserviceConfig := config.NewServiceConfigBuilder().\n\t\tSetInterface(<span class=\"hljs-string\">\"\"</span>). <span class=\"hljs-comment\">// read interface from pb</span>\n\t\tBuild()\n  \n\tproviderConfig := config.NewProviderConfigBuilder().\n\t\tAddService(<span class=\"hljs-string\">\"GreeterProvider\"</span>, serviceConfig).\n\t\tBuild()\n  \n\trootConfig := config.NewRootConfigBuilder().\n\t\tAddProtocol(<span class=\"hljs-string\">\"triple-protocol-id\"</span>, protocolConfig). <span class=\"hljs-comment\">// add protocol, key is custom</span>\n\t\tSetProvider(providerConfig).Build()\n  \n\t<span class=\"hljs-keyword\">if</span> err := config.Load(config.WithRootConfig(rootConfig)); err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\t<span class=\"hljs-keyword\">select</span> {}\n}\n\n</code></pre>\n<p>配置 API 看上去写法较为复杂，但单个配置结构的构造过程都是一致的，参考 Java  Builder 的设计，我们在配置 API 模块选用 <code>New().SetA().SetB().Build()</code>的方式来逐层构造单个配置结构。</p>\n<p>完成后，可删除掉go-server/conf 文件夹。</p>\n<h3>2.2 修改客户端代码：</h3>\n<p>go-client/cmd/client.go</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tconfig.SetConsumerService(grpcGreeterImpl)\n\n\treferenceConfig := config.NewReferenceConfigBuilder().\n\t\tSetProtocol(<span class=\"hljs-string\">\"tri\"</span>).\n\t\tSetURL(<span class=\"hljs-string\">\"tri://localhost:20000\"</span>).\n\t\tSetInterface(<span class=\"hljs-string\">\"\"</span>). <span class=\"hljs-comment\">// read interface name from pb</span>\n\t\tBuild()\n\n\tconsumerConfig := config.NewConsumerConfigBuilder().\n\t\tAddReference(<span class=\"hljs-string\">\"GreeterClientImpl\"</span>, referenceConfig).\n\t\tBuild()\n\n\trootConfig := config.NewRootConfigBuilder().\n\t\tSetConsumer(consumerConfig).Build()\n\t<span class=\"hljs-keyword\">if</span> err := config.Load(config.WithRootConfig(rootConfig)); err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\n\tlogger.Info(<span class=\"hljs-string\">\"start to test dubbo\"</span>)\n\treq := &amp;api.HelloRequest{\n\t\tName: <span class=\"hljs-string\">\"laurence\"</span>,\n\t}\n\treply, err := grpcGreeterImpl.SayHello(context.Background(), req)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\tlogger.Error(err)\n\t}\n\tlogger.Infof(<span class=\"hljs-string\">\"client response result: %v\\n\"</span>, reply)\n}\n\n</code></pre>\n<p>完成后，可删除掉go-client/conf 文件夹。</p>\n<h3>2.3 验证 Config API</h3>\n<p>分别启动 server 和 client ，查看调用信息。</p>\n<pre><code>INFO    cmd/client.go:62  client response result: name:&quot;Hello laurence&quot;  id:&quot;12345&quot;  age:21\n</code></pre>\n",
  "link": "/zh-cn/docs/user/tasks/config/config_api.html",
  "meta": {
    "title": "使用配置 API 启动应用",
    "keywords": "使用配置 API 启动应用",
    "description": "使用配置 API 启动应用"
  }
}