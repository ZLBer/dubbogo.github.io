{
  "filename": "aop.md",
  "__html": "<h1>自定义服务调用中间件</h1>\n<p>参考samples <a href=\"https://github.com/apache/dubbo-go-samples/tree/master/filter\">dubbo-go-samples/filter</a></p>\n<h2>1. 准备工作</h2>\n<ul>\n<li>dubbo-go cli 工具和依赖工具已安装</li>\n<li>阅读<a href=\"../../concept/service_management/aop_and_extension.html\">【组件加载与可扩展性】</a></li>\n<li>创建一个新的 demo 应用</li>\n</ul>\n<h2>2. 配置指定 Filter</h2>\n<p>指定filter时可用','分隔</p>\n<ul>\n<li>\n<p>Consumer 端</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">consumer:</span>\n    <span class=\"hljs-attr\">filter:</span> <span class=\"hljs-string\">echo,token,tps,myCustomFilter</span> <span class=\"hljs-comment\"># 可指定自定义filter</span>\n</code></pre>\n</li>\n<li>\n<p>Provider 端</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">provider:</span>\n    <span class=\"hljs-attr\">services:</span>\n      <span class=\"hljs-attr\">GreeterProvider:</span>\n        <span class=\"hljs-attr\">filter:</span> <span class=\"hljs-string\">myCustomFilter,echo,tps</span>\n</code></pre>\n</li>\n</ul>\n<h2>3. 自定义Filter</h2>\n<p>用户可在代码中自定义 Filter，注册到框架上，并在配置中选择使用。</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span> {\n\textension.SetFilter(<span class=\"hljs-string\">\"myCustomFilter\"</span>, NewMyClientFilter)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewMyClientFilter</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">filter</span>.<span class=\"hljs-title\">Filter</span></span> {\n\t<span class=\"hljs-keyword\">return</span> &amp;MyClientFilter{}\n}\n\n<span class=\"hljs-keyword\">type</span> MyClientFilter <span class=\"hljs-keyword\">struct</span> {\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *MyClientFilter)</span> <span class=\"hljs-title\">Invoke</span><span class=\"hljs-params\">(ctx context.Context, invoker protocol.Invoker, invocation protocol.Invocation)</span> <span class=\"hljs-title\">protocol</span>.<span class=\"hljs-title\">Result</span></span> {\n\tfmt.Println(<span class=\"hljs-string\">\"MyClientFilter Invoke is called, method Name = \"</span>, invocation.MethodName())\n\t<span class=\"hljs-keyword\">return</span> invoker.Invoke(ctx, invocation)\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *MyClientFilter)</span> <span class=\"hljs-title\">OnResponse</span><span class=\"hljs-params\">(ctx context.Context, result protocol.Result, invoker protocol.Invoker, protocol protocol.Invocation)</span> <span class=\"hljs-title\">protocol</span>.<span class=\"hljs-title\">Result</span></span> {\n\tfmt.Println(<span class=\"hljs-string\">\"MyClientFilter OnResponse is called\"</span>)\n\t<span class=\"hljs-keyword\">return</span> result\n}\n\n</code></pre>\n",
  "link": "/zh-cn/docs/user/tasks/service_management/aop.html",
  "meta": {
    "title": "自定义服务调用中间件",
    "keywords": "自定义服务调用中间件",
    "description": "自定义服务调用中间件"
  }
}