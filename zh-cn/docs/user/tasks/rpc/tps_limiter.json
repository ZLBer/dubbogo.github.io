{
  "filename": "tps_limiter.md",
  "__html": "<h1>为服务端设置限流</h1>\n<h2>1. 准备工作</h2>\n<ul>\n<li>dubbo-go cli 工具和依赖工具已安装</li>\n<li>创建一个新的 demo 应用</li>\n</ul>\n<h2>2. 修改限流逻辑并验证</h2>\n<p>Dubbo-go 为用户提供了内置的限流拒绝逻辑，并支持用户根据自己的业务场景，定义需要的限流机制、拒绝逻辑。</p>\n<p>正常情况下，不设置流量限制，当用户在 server 端配置了限流逻辑和参数后，将会</p>\n<h3>2.1 配置限流参数</h3>\n<p>go-server/conf/dubbogo.yaml: 配置限流参数</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">protocols:</span>\n    <span class=\"hljs-attr\">triple:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">tri</span>\n      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">20000</span>\n  <span class=\"hljs-attr\">provider:</span>\n    <span class=\"hljs-attr\">services:</span>\n      <span class=\"hljs-attr\">GreeterProvider:</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">\"\"</span> <span class=\"hljs-comment\"># read from pb</span>\n        <span class=\"hljs-attr\">tps.limiter:</span> <span class=\"hljs-string\">\"method-service\"</span>\n        <span class=\"hljs-attr\">tps.limit.strategy:</span> <span class=\"hljs-string\">\"slidingWindow\"</span> \n        <span class=\"hljs-attr\">tps.limit.rejected.handler:</span> <span class=\"hljs-string\">\"default\"</span>\n        <span class=\"hljs-attr\">tps.limit.interval:</span> <span class=\"hljs-number\">1000</span> \n        <span class=\"hljs-attr\">tps.limit.rate:</span> <span class=\"hljs-number\">3</span>\n\n</code></pre>\n<p>参数说明：</p>\n<ul>\n<li>tps.limiter：限流器选择。method-service 为框架内置的一个限流器，可以配置服务和方法级别的限流逻辑，可自定义。</li>\n<li>tps.limit.strategy：限流策略选择，slidingWindow 为框架内置的一个限流策略，可以按照滑动窗口的形式，拒绝掉窗口内超过流量限制的请求。</li>\n<li>tps.limit.rejected.handler: 拒绝策略，default 为默认拒绝方式，返回空对象，可自定义</li>\n<li>tps.limit.interval：限流窗口区间，单位是ms。</li>\n<li>tps.limit.rate：窗口内流量限制，单位是请求次数。</li>\n</ul>\n<p>按照上述配置，服务端只允许当前接口在一秒内被调用三次。</p>\n<h3>2.2 发起超流请求，验证限流能力</h3>\n<p>将客户端的请求逻辑设置为每秒钟请求五次，并计算成功率。</p>\n<p>go-client/cmd/client.go</p>\n<pre><code class=\"language-go\">\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tconfig.SetConsumerService(grpcGreeterImpl)\n\t<span class=\"hljs-keyword\">if</span> err := config.Load(); err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\n\tlogger.Info(<span class=\"hljs-string\">\"start to test dubbo\"</span>)\n\treq := &amp;api.HelloRequest{\n\t\tName: <span class=\"hljs-string\">\"laurence\"</span>,\n\t}\n\n\t<span class=\"hljs-keyword\">for</span> {\n\t\tgoodCount := <span class=\"hljs-number\">0</span>\n\t\tbadCount := <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">for</span>{\n\t\t\ttime.Sleep(time.Millisecond*<span class=\"hljs-number\">200</span>)\n\t\t\treply, _ := grpcGreeterImpl.SayHello(context.Background(), req)\n\t\t\t<span class=\"hljs-keyword\">if</span> reply.Name == <span class=\"hljs-string\">\"\"</span> {\n\t\t\t\tbadCount++\n\t\t\t}<span class=\"hljs-keyword\">else</span> {\n\t\t\t\tgoodCount++\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">if</span> badCount + goodCount ==<span class=\"hljs-number\">5</span>{\n\t\t\t\t<span class=\"hljs-keyword\">break</span>\n\t\t\t}\n\t\t}\n\t\tlogger.Infof(<span class=\"hljs-string\">\"Success rate = %v\\n\"</span>, <span class=\"hljs-keyword\">float64</span>(goodCount)/<span class=\"hljs-keyword\">float64</span>(goodCount + badCount))\n\t}\n}\n</code></pre>\n<p>可在日志中看到请求成功率为0.6，每秒钟只允许三次请求被执行。</p>\n<pre><code class=\"language-bash\">INFO    cmd/client.go:62        Success rate = 0.6\n\nINFO    cmd/client.go:62        Success rate = 0.6\n\nINFO    cmd/client.go:62        Success rate = 0.6\n</code></pre>\n<p>在服务端日志中可以看到拒绝的信息：</p>\n<pre><code class=\"language-bash\">ERROR   tps/filter.go:84  The invocation was rejected due to over the limiter limitation...\n</code></pre>\n",
  "link": "/zh-cn/docs/user/tasks/rpc/tps_limiter.html",
  "meta": {
    "title": "rpc 调用配置",
    "keywords": "rpc 调用配置",
    "description": "rpc 调用配置"
  }
}