{
  "filename": "traffic_management.md",
  "__html": "<h1>流量管理</h1>\n<p>在本节中，我们将延续上一个任务<a href=\"./app.html\">【在 Istio 环境部署 Dubbo-go 应用】</a>。</p>\n<p>在之前的任务中，我们在集群中部署了一组 Dubbo-go Server和 Client 端应用，验证了服务发现和调用成功。在本节中，我们将创建新版本的 Server 端应用。通过配置 VirtualService 和 DestinationRule ，实现路由管理，和流量转移能力</p>\n<h2>1. 准备工作</h2>\n<ul>\n<li>dubbo-go cli 工具和依赖工具已安装、grpc_cli (如需本地调试)。</li>\n<li>docker、helm、kubectl 环境已安装。（arm 机器需支持 docker buildx）</li>\n<li>任务<a href=\"./app.html\">【在 Istio 环境部署 Dubbo-go 应用】</a>已完成</li>\n</ul>\n<h2>2. 开发多版本Dubbo-go 应用。</h2>\n<h3>2.1 使用 dubbogo-cli 创建另一个项目模板</h3>\n<pre><code class=\"language-bash\">$ dubbogo-cli newApp . \n</code></pre>\n<h3>2.2 开发和部署客户端 Dubbo-go 应用 v2：</h3>\n<h4>编写业务逻辑</h4>\n<ul>\n<li>修改 package/service/service.go 的实现方法，返回版本号为 v2.0.0</li>\n</ul>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *GreeterServerImpl)</span> <span class=\"hljs-title\">SayHello</span><span class=\"hljs-params\">(ctx context.Context, in *api.HelloRequest)</span> <span class=\"hljs-params\">(*api.User, error)</span></span> {\n\t<span class=\"hljs-keyword\">return</span> &amp;api.User{Name: <span class=\"hljs-string\">\"Hello \"</span> + in.Name, Id: <span class=\"hljs-string\">\"v2.0.0\"</span>}, <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n<ul>\n<li>\n<p>修改如下配置文件，使用xds协议作为注册中心，加载名为 GreeterServerImpl 的服务结构。</p>\n<p>conf/dubbogo.yaml</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">registries:</span>\n    <span class=\"hljs-attr\">xds:</span>\n      <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">xds</span>\n      <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">istiod.istio-system.svc.cluster.local:15010</span>\n  <span class=\"hljs-attr\">protocols:</span>\n    <span class=\"hljs-attr\">triple:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">tri</span>\n      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">20000</span>\n  <span class=\"hljs-attr\">provider:</span>\n    <span class=\"hljs-attr\">services:</span>\n      <span class=\"hljs-attr\">GreeterServerImpl:</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">\"\"</span> <span class=\"hljs-comment\"># read from stub</span>\n\n</code></pre>\n<p>至此，应用开发完成。</p>\n</li>\n</ul>\n<h4>配置构建和部署参数</h4>\n<ul>\n<li>\n<p>指定需要构建的镜像：</p>\n<p>修改 Makefile 如下字段，指定好需要构建的镜像地址和版本，我们把镜像 tag 改为 2.0.0。</p>\n<p>指定好需要通过 helm 安装的名称。</p>\n<pre><code>IMAGE = xxx/dubbo-go-server\nTAG = 2.0.0\nHELM_INSTALL_NAME = dubbo-go-server\n</code></pre>\n</li>\n<li>\n<p>指定需要部署的应用和镜像：</p>\n<p>修改 chart/app/Chart.yaml 如下字段，指定当前应用名为 <code>dubbo-go-server</code>，我们在创建v1版本服务的时候，已经有了该应用的 service，这次部署时模板将不会创建 service。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dubbo-go-server</span>\n<span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">dubbo-go-server</span>\n</code></pre>\n<p>修改 chart/app/values.yaml 如下字段，指定需要部署的镜像为2.0.0，以及当前开发的应用版本 dubbogoAppVersion 为 v2。</p>\n<p>部署的镜像需要和上述构建的镜像一致。当前应用版本用于 mesh 流量规则控制。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">image:</span>\n  <span class=\"hljs-attr\">repository:</span>  <span class=\"hljs-string\">xxx/dubbo-go-server</span>\n  <span class=\"hljs-attr\">pullPolicy:</span> <span class=\"hljs-string\">Always</span>\n  <span class=\"hljs-attr\">tag:</span> <span class=\"hljs-string\">\"2.0.0\"</span>\n\n<span class=\"hljs-comment\"># Dubbo-go-mesh version control labels</span>\n<span class=\"hljs-attr\">version:</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">dubbogoAppVersion:</span> <span class=\"hljs-string\">v2</span>\n</code></pre>\n<p>至此，构建参数和发布参数都已指定好，可以进行构建和部署了。</p>\n</li>\n</ul>\n<h4>使用模板构建和部署 Dubbo-go 应用</h4>\n<ul>\n<li>\n<p>构建、推送镜像</p>\n<p><code>$ make build</code>   (本地为 amd64机器)</p>\n<p>或者</p>\n<p><code>$ make buildx-publish</code>     (本地为 arm64机器，依赖 docker buildx 命令)</p>\n</li>\n<li>\n<p>发布 Dubbo-go Server  v2 至集群</p>\n<pre><code class=\"language-bash\">$ make deploy\nNAME: dubbo-go-server-v2\nLAST DEPLOYED: Thu Apr  7 12:29:28 2022\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\n$ helm list\nNAME                    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART                   dubbo-go-client         default         1               2022-04-07 11:49:55.517898 +0800 CST    deployed        dubbo-go-client-0.0.1   1.16.0     \ndubbo-go-server-v1      default         1               2022-04-07 11:23:18.397658 +0800 CST    deployed        dubbo-go-server-0.0.1   1.16.0     \ndubbo-go-server-v2      default         1               2022-04-07 12:29:28.497476 +0800 CST    deployed        dubbo-go-client-0.0.1   1.16.0\n</code></pre>\n<p>可看到通过 helm 部署成功, 目前已经在集群中存在一个 Client 应用，和 Server 的两个版本。</p>\n</li>\n</ul>\n<h3>2.3 验证应用</h3>\n<h4>查看资源部署情况</h4>\n<p>查看部署好的 deployment ，server 包含了两个版本。</p>\n<pre><code class=\"language-bash\">$  kubectl get deployment \nNAME                 READY   UP-TO-DATE   AVAILABLE   AGE\ndubbo-go-client-v1   1/1     1            1           40m\ndubbo-go-server-v2   1/1     1            1           77s\ndubbo-go-server-v1   1/1     1            1           67m\n</code></pre>\n<p>查看部署好的 service。两个版本的deployment 共用同一个 service。</p>\n<pre><code class=\"language-bash\">$ kubectl get svc        \nNAME              TYPE        CLUSTER-IP        EXTERNAL-IP   PORT(S)     AGE\ndubbo-go-client   ClusterIP   192.168.8.176     &lt;none&gt;        20000/TCP   41m\ndubbo-go-server   ClusterIP   192.168.216.253   &lt;none&gt;        20000/TCP   67m\n</code></pre>\n<p>查看 Client 应用日志，验证请求调用到了两个版本的应用上。</p>\n<pre><code class=\"language-bash\">$ kubectl get pods  | grep client | awk <span class=\"hljs-string\">'{print $1}'</span> | xargs kubectl logs \n...\n2022-04-07T05:06:40.384Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v2.0.0\"</span>\n2022-04-07T05:06:41.386Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v2.0.0\"</span>\n2022-04-07T05:06:42.388Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:06:43.389Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v2.0.0\"</span>\n2022-04-07T05:06:44.390Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v2.0.0\"</span>\n2022-04-07T05:06:45.392Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:06:46.393Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:06:47.394Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:06:48.396Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v2.0.0\"</span>\n2022-04-07T05:06:49.397Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n</code></pre>\n<p>至此，我们开发并且部署成功了多版本应用。</p>\n<h2>3. 配置请求路由</h2>\n<h3>3.1 配置目标规则</h3>\n<p>执行以下命令以创建目标规则，该目标规则将 dubbo-go-server 细分为两个子集。v1和 v2</p>\n<pre><code class=\"language-bash\">$ kubectl apply -f destinationrule.yaml\n</code></pre>\n<p>destinationrule.yaml 内容：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.istio.io/v1alpha3</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DestinationRule</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dubbo-go-server</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">dubbo-go-server</span>\n  <span class=\"hljs-attr\">subsets:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">v1</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">dubbogoAppVersion:</span> <span class=\"hljs-string\">v1</span> <span class=\"hljs-comment\"># 对应应用模板中 chart/app/values.yaml 中指定的版本标签</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">v2</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">dubbogoAppVersion:</span> <span class=\"hljs-string\">v2</span>\n</code></pre>\n<h3>3.2 应用 Virtual Service</h3>\n<p>执行以下命令以创建路由，该路由将所有流量都路由至v1 版本应用。</p>\n<pre><code class=\"language-bash\">$ kubectl apply -f virtualservice.yaml\n</code></pre>\n<p>virtualservice.yaml 内容</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.istio.io/v1alpha3</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">VirtualService</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dubbo-go-server</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">hosts:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dubbo-go-server</span>\n  <span class=\"hljs-attr\">http:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">route:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">destination:</span>\n        <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">dubbo-go-server</span>\n        <span class=\"hljs-attr\">subset:</span> <span class=\"hljs-string\">v1</span>\n</code></pre>\n<h3>3.3 验证路由生效</h3>\n<p>所有流量将流向 v1 版本应用。</p>\n<pre><code class=\"language-bash\">$ kubectl get pods  | grep client | awk <span class=\"hljs-string\">'{print $1}'</span> | xargs kubectl logs \n...\n2022-04-07T05:40:44.353Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:40:45.354Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:40:46.356Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:40:47.357Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:40:48.359Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:40:49.361Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n</code></pre>\n<h2>4. 基于用户身份的路由</h2>\n<p>有了上述多版本应用路由的基础，我们可以通过一些策略，来进行灵活的流量管理。</p>\n<h3>4.1 为客户端应用增加用户身份标识</h3>\n<p>我们希望拥有 user: admin 标识的流量都可以体验 v2 新版本应用。</p>\n<p>回到之前创建的 dubbo-go-client 项目，修改 cmd/app.go 的 main 函数，增加调用标识：<code>user: admin</code>。</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tclient := &amp;api.GreeterClientImpl{}\n\tconfig.SetConsumerService(client)\n\t<span class=\"hljs-keyword\">if</span> err := config.Load(); err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\trequest := &amp;api.HelloRequest{\n\t\tName: <span class=\"hljs-string\">\"laurence\"</span>,\n\t}\n\n\t<span class=\"hljs-keyword\">for</span>{\n\t\tctx := context.Background()\n\t\tctx = context.WithValue(ctx, constant.AttachmentKey, <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">string</span>{ \n\t\t\t<span class=\"hljs-string\">\"user\"</span>:<span class=\"hljs-string\">\"admin\"</span>, <span class=\"hljs-comment\">// 使用上下文 context 为调用增加标识</span>\n\t\t})\n\n\t\t<span class=\"hljs-keyword\">if</span> rsp, err := client.SayHello(ctx, request); err != <span class=\"hljs-literal\">nil</span>{\n\t\t\tlogger.Errorf(<span class=\"hljs-string\">\"call server error = %s\"</span>, err)\n\t\t}<span class=\"hljs-keyword\">else</span>{\n\t\t\tlogger.Infof(<span class=\"hljs-string\">\"call server response = %+v\"</span>, rsp)\n\t\t}\n\t\ttime.Sleep(time.Second)\n\t}\n}\n</code></pre>\n<ul>\n<li>\n<p>构建、推送镜像，覆盖之前的提交。您也可以升级一下发布的镜像版本。</p>\n<p><code>$ make build</code>   (本地为 amd64机器)</p>\n<p>或者</p>\n<p><code>$ make buildx-publish</code>     (本地为 arm64机器，依赖 docker buildx 命令)</p>\n</li>\n<li>\n<p>删除 dubbo-go-client  应用</p>\n<pre><code>$ make remove\nhelm uninstall dubbo-go-client\nrelease &quot;dubbo-go-client&quot; uninstalled\n</code></pre>\n</li>\n<li>\n<p>重新发布应用。</p>\n<p><code>$ make deploy</code></p>\n<p>发布后，验证调用成功，由于前面进行了路由配置。所有流量都流向 v1 版本。</p>\n<pre><code class=\"language-bash\">$ kubectl get pods  | grep client | awk <span class=\"hljs-string\">'{print $1}'</span> | xargs kubectl logs \n...\n2022-04-07T05:40:44.353Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:40:45.354Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:40:46.356Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:40:47.357Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:40:48.359Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:40:49.361Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n</code></pre>\n</li>\n</ul>\n<h3>4.2 创建基于用户身份的路由</h3>\n<p>执行以下命令以修改/创建路由，该路由将所有请求头存在 user: admin 标识的流量都路由至 v2 版本。</p>\n<pre><code class=\"language-bash\">$ kubectl apply -f virtualservice.yaml\n</code></pre>\n<p>virtualservice.yaml 内容</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.istio.io/v1alpha3</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">VirtualService</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dubbo-go-server</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">hosts:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dubbo-go-server</span>\n  <span class=\"hljs-attr\">http:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">match:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">headers:</span>\n        <span class=\"hljs-attr\">user:</span>\n          <span class=\"hljs-attr\">exact:</span> <span class=\"hljs-string\">admin</span>\n    <span class=\"hljs-attr\">route:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">destination:</span>\n          <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">dubbo-go-server</span>\n          <span class=\"hljs-attr\">subset:</span> <span class=\"hljs-string\">v2</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">route:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">destination:</span>\n        <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">dubbo-go-server</span>\n        <span class=\"hljs-attr\">subset:</span> <span class=\"hljs-string\">v1</span>\n</code></pre>\n<h3>4.3 验证路由生效</h3>\n<p>所有流量将流向 v2 版本应用。</p>\n<pre><code class=\"language-bash\">$ kubectl get pods  | grep client | awk <span class=\"hljs-string\">'{print $1}'</span> | xargs kubectl logs \n...\n2022-04-07T05:52:18.714Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v2.0.0\"</span>\n2022-04-07T05:52:19.716Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v2.0.0\"</span>\n2022-04-07T05:52:20.717Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v2.0.0\"</span>\n2022-04-07T05:52:21.718Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v2.0.0\"</span>\n2022-04-07T05:52:22.720Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v2.0.0\"</span>\n2022-04-07T05:52:23.722Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v2.0.0\"</span>\n2022-04-07T05:52:24.723Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v2.0.0\"</span>\n</code></pre>\n<h2>5. 基于权重的路由</h2>\n<h3>5.1 创建基于权重的路由</h3>\n<p>延续上述任务，我们执行以下命令以修改/创建路由，该路由将流量的 10% 导入新版本应用，进行灰度测试。</p>\n<pre><code class=\"language-bash\">$ kubectl apply -f virtualservice.yaml\n</code></pre>\n<p>virtualservice.yaml 内容</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.istio.io/v1alpha3</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">VirtualService</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dubbo-go-server</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">hosts:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dubbo-go-server</span>\n  <span class=\"hljs-attr\">http:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">route:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">destination:</span>\n          <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">dubbo-go-server</span>\n          <span class=\"hljs-attr\">subset:</span> <span class=\"hljs-string\">v1</span>\n        <span class=\"hljs-attr\">weight:</span> <span class=\"hljs-number\">90</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">destination:</span>\n          <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">dubbo-go-server</span>\n          <span class=\"hljs-attr\">subset:</span> <span class=\"hljs-string\">v2</span>\n        <span class=\"hljs-attr\">weight:</span> <span class=\"hljs-number\">10</span>\n</code></pre>\n<h3>5.2 验证路由生效</h3>\n<p>少数流量将流向 v2 版本。</p>\n<pre><code class=\"language-bash\">$ kubectl get pods  | grep client | awk <span class=\"hljs-string\">'{print $1}'</span> | xargs kubectl logs \n...\n2022-04-07T05:55:52.035Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:55:53.036Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:55:54.037Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:55:55.039Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:55:56.041Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:55:57.043Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:55:58.045Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:55:59.047Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:56:00.049Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:56:01.050Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v2.0.0\"</span>\n2022-04-07T05:56:02.053Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T05:56:03.055Z        INFO    cmd/app.go:35   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span>  id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n</code></pre>\n",
  "link": "/zh-cn/docs/user/tasks/mesh/traffic_management.html",
  "meta": {
    "title": "流量管理",
    "keywords": "流量管理",
    "description": "流量管理"
  }
}