{
  "filename": "quickstart_triple.md",
  "__html": "<h1>Dubbo-go 3.0 快速开始</h1>\n<h2>1. 环境安装</h2>\n<h3>1.1 安装Go语言环境</h3>\n<p>建议使用最新版 go 1.17</p>\n<p>go version &gt;= go 1.15</p>\n<p><a href=\"https://golang.google.cn/\">【Go 语言官网下载地址】</a></p>\n<p>将 $GOPATH/bin 加入环境变量</p>\n<h3>1.2 安装序列化工具protoc</h3>\n<p><a href=\"https://github.com/protocolbuffers/protobuf/releases\">【protoc 下载地址】</a></p>\n<h3>1.3 安装 protoc-gen-go, proto-gen-go-triple 编译插件</h3>\n<p>本章 quick start 按照最新版示例和组件进行介绍。</p>\n<table>\n<thead>\n<tr>\n<th>依赖</th>\n<th>Dubbo-go</th>\n<th>Triple</th>\n<th>protoc-gen-go-triple</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>适配版本号</td>\n<td>v3.0.0</td>\n<td>v1.1.6</td>\n<td>v1.0.5</td>\n</tr>\n<tr>\n<td>适配版本号</td>\n<td>v3.0.0-rc4-1</td>\n<td>v1.1.3</td>\n<td>v1.0.2</td>\n</tr>\n<tr>\n<td>适配版本号</td>\n<td>v3.0.0-rc3</td>\n<td>v1.0.9</td>\n<td>v1.0.0</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-shell\">export GO111MODULE=\"on\"\nexport GOPROXY=\"https://goproxy.cn\"\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26.0\ngo install github.com/dubbogo/tools/cmd/protoc-gen-go-triple@v1.0.5\n</code></pre>\n<p>确保上述protoc 和安装的 protoc-gen-go-triple 位于$(GOPATH)/bin, 在系统环境变量内</p>\n<pre><code class=\"language-bash\">$ protoc --version\nlibprotoc 3.14.0\n$ protoc-gen-go --version\nprotoc-gen-go v1.26.0\n$ protoc-gen-go-triple --version\nprotoc-gen-go-triple 1.0.5\n</code></pre>\n<h3>1.4 启动zookeeper</h3>\n<p>选择您喜欢的方式启动zk，如您安装docker-compose可直接从文件启动:</p>\n<p>zookeeper.yml:</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">'3'</span>\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">zookeeper:</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">zookeeper</span>\n    <span class=\"hljs-attr\">ports:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">2181</span><span class=\"hljs-string\">:2181</span>\n    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">on-failure</span>\n</code></pre>\n<pre><code class=\"language-shell\">docker-compose -f ./zookeeper.yml up -d\n</code></pre>\n<h2>2. 编译接口</h2>\n<h3>2.1 编写接口描述文件 helloworld.proto</h3>\n<pre><code class=\"language-protobuf\">syntax = <span class=\"hljs-string\">\"proto3\"</span>;\n\n<span class=\"hljs-keyword\">option</span> go_package=<span class=\"hljs-string\">\"./;api\"</span>;\n\n<span class=\"hljs-comment\">// service and message are under this package name</span>\n<span class=\"hljs-keyword\">package</span> org.apache.dubbo.quickstart.samples; \n\n<span class=\"hljs-comment\">// The greeting service definition.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">service</span> <span class=\"hljs-title\">UserProvider</span> </span>{\n  <span class=\"hljs-comment\">// Sends a greeting</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">rpc</span> SayHello (HelloRequest) <span class=\"hljs-keyword\">returns</span> (User) {}\n  <span class=\"hljs-keyword\">rpc</span> SayHelloStream (stream HelloRequest) <span class=\"hljs-keyword\">returns</span> (stream User) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1</span>;\n}\n\n<span class=\"hljs-comment\">// The response message containing the greetings</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">message</span> <span class=\"hljs-title\">User</span> </span>{\n  <span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-built_in\">string</span> id = <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-built_in\">int32</span> age = <span class=\"hljs-number\">3</span>;\n  <span class=\"hljs-keyword\">repeated</span> HelloRequest req = <span class=\"hljs-number\">4</span>;\n}\n</code></pre>\n<h3>2.2 使用安装好的编译工具编译接</h3>\n<p>参数意义：<code>--go_out=.</code> 使用上述安装的 <code>protoc-gen-go</code> 插件，生成文件到当前目录，<code>--go-triple_out=.</code>使用上述安装的 <code>protoc-gen-go-triple</code> 插件，生成文件到当前目录。</p>\n<pre><code class=\"language-bash\">protoc --go_out=. --go-triple_out=. ./helloworld.proto\n</code></pre>\n<p>执行该指令后，会生成两个文件，分别是helloworld.pb (包含 proto 结构) 和 helloworld_triple.pb.go (包含 triple 协议接口)。</p>\n<p>代码生成和使用方式与 grpc 类似。</p>\n<h2>3. 开启一次RPC调用</h2>\n<p>建立如下文件目录：</p>\n<pre><code class=\"language-text\">quickstart\n├── api\n│   ├── helloworld.pb.go\n│   ├── helloworld.proto\n│   └── helloworld_triple.pb.go\n├── client\n│   └── client.go\n└── server\n    └── server.go\n\n</code></pre>\n<p>client.go文件：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"context\"</span>\n)\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/common/logger\"</span>\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/config\"</span>\n\t_ <span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/imports\"</span>\n)\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"dubbo3-demo/api\"</span>\n)\n\n<span class=\"hljs-keyword\">var</span> greeterProvider = &amp;api.UserProviderClientImpl{}\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-comment\">// validate consumer greeterProvider ptr</span>\n\tconfig.SetConsumerService(greeterProvider)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-comment\">// init rootConfig with config api</span>\n\trc := config.NewRootConfigBuilder().\n\t\tSetConsumer(config.NewConsumerConfigBuilder().\n\t\t\tAddReference(<span class=\"hljs-string\">\"UserProviderClientImpl\"</span>, config.NewReferenceConfigBuilder().\n\t\t\t\tSetProtocol(<span class=\"hljs-string\">\"tri\"</span>).\n\t\t\t\tBuild()).\n\t\t\tBuild()).\n\t\tAddRegistry(<span class=\"hljs-string\">\"zookeeper\"</span>, config.NewRegistryConfigWithProtocolDefaultPort(<span class=\"hljs-string\">\"zookeeper\"</span>)).\n\t\tBuild()\n\n\t<span class=\"hljs-comment\">// start dubbo-go framework with configuration</span>\n\t<span class=\"hljs-keyword\">if</span> err := config.Load(config.WithRootConfig(rc)); err != <span class=\"hljs-literal\">nil</span>{\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\n\t<span class=\"hljs-comment\">// run rpc invocation</span>\n\ttestSayHello()\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">testSayHello</span><span class=\"hljs-params\">()</span></span> {\n\tctx := context.Background()\n\n\treq := api.HelloRequest{\n\t\tName: <span class=\"hljs-string\">\"laurence\"</span>,\n\t}\n\tuser, err := greeterProvider.SayHello(ctx, &amp;req)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\n\tlogger.Infof(<span class=\"hljs-string\">\"Receive user = %+v\\n\"</span>, user)\n}\n</code></pre>\n<p>server.go文件：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"context\"</span>\n)\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/common/logger\"</span>\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/config\"</span>\n\t_ <span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/imports\"</span>\n)\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"dubbo3-demo/api\"</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tconfig.SetProviderService(&amp;GreeterProvider{})\n\n\trc := config.NewRootConfigBuilder().\n\t\tSetProvider(config.NewProviderConfigBuilder().\n\t\t\tAddService(<span class=\"hljs-string\">\"GreeterProvider\"</span>, config.NewServiceConfigBuilder().Build()).\n\t\t\tBuild()).\n\t\tAddProtocol(<span class=\"hljs-string\">\"tripleProtocolKey\"</span>, config.NewProtocolConfigBuilder().\n\t\t\tSetName(<span class=\"hljs-string\">\"tri\"</span>).\n\t\t\tSetPort(<span class=\"hljs-string\">\"20001\"</span>).\n\t\t\tBuild()).\n\t\tAddRegistry(<span class=\"hljs-string\">\"registryKey\"</span>, config.NewRegistryConfigWithProtocolDefaultPort(<span class=\"hljs-string\">\"zookeeper\"</span>)).\n\t\tBuild()\n\n\t<span class=\"hljs-comment\">// start dubbo-go framework with configuration</span>\n\t<span class=\"hljs-keyword\">if</span> err := config.Load(config.WithRootConfig(rc)); err != <span class=\"hljs-literal\">nil</span>{\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\n\t<span class=\"hljs-keyword\">select</span> {}\n}\n\n<span class=\"hljs-keyword\">type</span> GreeterProvider <span class=\"hljs-keyword\">struct</span> {\n\tapi.UnimplementedUserProviderServer\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *GreeterProvider)</span> <span class=\"hljs-title\">SayHelloStream</span><span class=\"hljs-params\">(svr api.UserProvider_SayHelloStreamServer)</span> <span class=\"hljs-title\">error</span></span> {\n\tc, err := svr.Recv()\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> err\n\t}\n\tlogger.Infof(<span class=\"hljs-string\">\"Dubbo-go GreeterProvider recv 1 user, name = %s\\n\"</span>, c.Name)\n\tc2, err := svr.Recv()\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> err\n\t}\n\tlogger.Infof(<span class=\"hljs-string\">\"Dubbo-go GreeterProvider recv 2 user, name = %s\\n\"</span>, c2.Name)\n\tc3, err := svr.Recv()\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> err\n\t}\n\tlogger.Infof(<span class=\"hljs-string\">\"Dubbo-go GreeterProvider recv 3 user, name = %s\\n\"</span>, c3.Name)\n\n\t<span class=\"hljs-keyword\">if</span> err:= svr.Send(&amp;api.User{\n\t\tName: <span class=\"hljs-string\">\"hello \"</span> + c.Name,\n\t\tAge:  <span class=\"hljs-number\">18</span>,\n\t\tId:   <span class=\"hljs-string\">\"123456789\"</span>,\n\t}); err != <span class=\"hljs-literal\">nil</span>{\n\t\t<span class=\"hljs-keyword\">return</span> err\n\t}\n\t<span class=\"hljs-keyword\">if</span> err := svr.Send(&amp;api.User{\n\t\tName: <span class=\"hljs-string\">\"hello \"</span> + c2.Name,\n\t\tAge:  <span class=\"hljs-number\">19</span>,\n\t\tId:   <span class=\"hljs-string\">\"123456789\"</span>,\n\t}); err != <span class=\"hljs-literal\">nil</span>{\n\t\t<span class=\"hljs-keyword\">return</span> err\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *GreeterProvider)</span> <span class=\"hljs-title\">SayHello</span><span class=\"hljs-params\">(ctx context.Context, in *api.HelloRequest)</span> <span class=\"hljs-params\">(*api.User, error)</span></span> {\n\tlogger.Infof(<span class=\"hljs-string\">\"Dubbo3 GreeterProvider get user name = %s\\n\"</span>, in.Name)\n\t<span class=\"hljs-keyword\">return</span> &amp;api.User{Name: <span class=\"hljs-string\">\"Hello \"</span> + in.Name, Id: <span class=\"hljs-string\">\"12345\"</span>, Age: <span class=\"hljs-number\">21</span>}, <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n<p>quickstart 目录下，执行 <code>go mod init dubbo3-demo</code></p>\n<p>如果弹出 go mod detected 弹窗，需要勾选 Enable Go modules integration ，设置GOPROXY，保证 Goland 可以正确拉取到依赖，方便开发。或者在设置中按照如下位置设置。</p>\n<p><img src=\"../../../../../img/doc-module.png\" alt=\"\"></p>\n<p>命令行执行 <code>export GOPROXY=&quot;https://goproxy.cn&quot;</code>设置PROXY</p>\n<p>执行<code>go mod tidy</code></p>\n<p>您可以看到最新的框架依赖</p>\n<pre><code class=\"language-go\">module dubbo3-demo\n\n<span class=\"hljs-keyword\">go</span> <span class=\"hljs-number\">1.17</span>\n\nrequire (\n\tdubbo.apache.org/dubbo-<span class=\"hljs-keyword\">go</span>/v3 v3<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>\n\tgithub.com/dubbogo/grpc-<span class=\"hljs-keyword\">go</span> v1<span class=\"hljs-number\">.42</span><span class=\"hljs-number\">.6</span>\n\tgithub.com/dubbogo/triple v1<span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.6</span>\n\tgoogle.golang.org/protobuf v1<span class=\"hljs-number\">.27</span><span class=\"hljs-number\">.1</span>\n)\n\nrequire (\n...\n)\n</code></pre>\n<p>最终文件目录：</p>\n<pre><code class=\"language-text\">quickstart\n├── api\n│   ├── helloworld.pb.go\n│   ├── helloworld.proto\n│   └── helloworld_triple.pb.go\n├── client\n│   └── client.go\n├── go.mod\n├── go.sum\n└── server\n    └── server.go\n</code></pre>\n<p>先后启动服务端和客户端（在 server 和 client 文件夹下分别执行 <code>go run .</code>) , 可在客户端看到输出：</p>\n<pre><code class=\"language-shell\"> Receive user = {Name:Hello laurence Id:12345 Age:21 ...}\n</code></pre>\n<p>获得调用结果成功</p>\n<h2>4. [可选] 使用 grpc_cli 工具进行 Triple 服务调试</h2>\n<h3>4.1 安装grpc_cli</h3>\n<pre><code>brew install grpc\n</code></pre>\n<h3>4.2 使用 grpc_cli 进行服务调试</h3>\n<ol>\n<li>查看 triple 服务的接口定义</li>\n</ol>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> grpc_cli ls localhost:20001 -l</span>\nfilename: helloworld.proto\npackage: org.apache.dubbo.quickstart.samples;\nservice UserProvider {\n  rpc SayHello(org.apache.dubbo.quickstart.samples.HelloRequest) returns (org.apache.dubbo.quickstart.samples.User) {}\n  rpc SayHelloStream(stream org.apache.dubbo.quickstart.samples.HelloRequest) returns (stream org.apache.dubbo.quickstart.samples.User) {}\n}\n</code></pre>\n<ol start=\"2\">\n<li>\n<p>查看请求参数类型</p>\n<p>例如开发者期望测试上述端口的 SayHello 方法，尝试获取HelloRequest的具体定义，需要执行r如下指令，可查看到对应参数的定义。</p>\n</li>\n</ol>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> grpc_cli <span class=\"hljs-built_in\">type</span> localhost:20001 org.apache.dubbo.quickstart.samples.HelloRequest</span>\nmessage HelloRequest {\n  string name = 1 [json_name = \"name\"];\n}\n</code></pre>\n<ol start=\"3\">\n<li>\n<p>请求接口</p>\n<p>已经知道了请求参数的具体类型，可以发起调用来测试对应服务。查看返回值是否符合预期。</p>\n</li>\n</ol>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> grpc_cli call localhost:20001 SayHello <span class=\"hljs-string\">\"name: 'laurence'\"</span></span>\nconnecting to localhost:20001\nname: \"Hello laurence\"\nid: \"12345\"\nage: 21\nReceived trailing metadata from server:\naccept-encoding : identity,gzip\nadaptive-service.inflight : 0\nadaptive-service.remaining : 50\ngrpc-accept-encoding : identity,deflate,gzip\nRpc succeeded with OK status\n</code></pre>\n<p>​\t可看到获得了正确的返回值。在 server 侧可以观察到被正确请求的日志：</p>\n<pre><code class=\"language-shell\">INFO    server/server.go:78     Dubbo3 GreeterProvider get user name = laurence\n</code></pre>\n<h2>5. 更多</h2>\n<p>细心的读者可以发现，以上例子编写的的服务端可以接受来自客户端的普通RPC、流式RPC调用请求。目前只编写了普通调用的Client，读者可以根据samples库中的例子来尝试编写流式客户端发起调用。</p>\n<p>更多samples可以参阅 <a href=\"../../samples/samples_repo.html\">【dubbo-go-samples】</a></p>\n<p>下一章：<a href=\"./quickstart_dubbo.html\">【Dubbo 协议快速开始】</a></p>\n",
  "link": "/zh-cn/docs/user/quickstart/3.0/quickstart_triple.html",
  "meta": {
    "title": "dubbo-go3.0快速开始",
    "keywords": "快速开始,helloworld,",
    "description": "快速上手dubbo-go3.0，编写一个简单的helloworld应用"
  }
}