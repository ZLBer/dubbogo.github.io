{
  "filename": "mesh_router.md",
  "__html": "<h1>Dubbo-go v3 Mesh路由规则</h1>\n<h2>路由规则介绍</h2>\n<p><a href=\"https://www.yuque.com/docs/share/c132d5db-0dcb-487f-8833-7c7732964bd4?#\">《微服务Mesh路由方案草案V2》</a></p>\n<h2>简介</h2>\n<p>路由规则，简单来说就是根据<strong>特定的条件</strong>，将<strong>特定的请求</strong>流量发送到<strong>特定的服务提供者</strong>。从而实现流量的分配。</p>\n<p>在 Dubbo3 统一路由规则的定义中，需要提供两个yaml格式的资源：virtual service 和 destination rule。其格式和 service mesh 定义的路由规则非常相似。</p>\n<ul>\n<li>virtual service</li>\n</ul>\n<p>定义host，用于和destination rule建立联系。<br>\n定义 service 匹配规则<br>\n定义 match 匹配规则<br>\n匹配到特定请求后，进行目标集群的查找和验证，对于为空情况，使用 fallback 机制。</p>\n<ul>\n<li>destination rule</li>\n</ul>\n<p>定义特定集群子集，以及子集所适配的标签，标签从 provider 端暴露的 url 中获取，并尝试匹配。</p>\n<h2>提供能力</h2>\n<h3>基于配置中心的路由配置</h3>\n<p>sample示例参见<a href=\"https://github.com/apache/dubbo-go-samples/tree/master/route/meshroute\">Mesh Router</a></p>\n<h4>1. 路由规则文件注解</h4>\n<p>路由规则只针对客户端，对于服务端，只需要在服务提供时打好特定的参数标签即可。</p>\n<h5>1.1 virtual-service</h5>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">service.dubbo.apache.org/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">VirtualService</span>\n<span class=\"hljs-attr\">metadata:</span> <span class=\"hljs-string\">{name:</span> <span class=\"hljs-string\">demo-route}</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">dubbo:</span>\n    <span class=\"hljs-comment\"># 使用正则表达式匹配service名，只有个满足该service名的请求才能路由。</span>\n    <span class=\"hljs-comment\"># 就此例子来说，不满足service名的请求会直接找不到provider</span>\n    <span class=\"hljs-comment\"># - services:</span>\n    <span class=\"hljs-comment\">#   - { regex: org.apache.dubbo.UserProvider* }</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">routedetail:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">match:</span> \n          <span class=\"hljs-comment\"># 匹配规则，如果（sourceLabel）客户端url满足存在参数 `trafficLabel: xxx` 的才能匹配成功</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sourceLabels:</span> <span class=\"hljs-string\">{trafficLabel:</span> <span class=\"hljs-string\">xxx}</span>\n          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx-project</span>\n          <span class=\"hljs-attr\">route:</span>  <span class=\"hljs-comment\"># 一旦匹配上述match规则，将选择 dest_rule 里定义的名为 isolation 的子集</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">destination:</span> <span class=\"hljs-string\">{host:</span> <span class=\"hljs-string\">demo,</span> <span class=\"hljs-attr\">subset:</span> <span class=\"hljs-string\">isolation}</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">match:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sourceLabels:</span> <span class=\"hljs-string\">{trafficLabel:</span> <span class=\"hljs-string\">testing-trunk}</span>\n          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">testing-trunk</span>\n          <span class=\"hljs-attr\">route:</span> <span class=\"hljs-comment\"># 一旦匹配上述match规则，将选择 dest_rule 里定义的名为 testing-trunk 的子集</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">destination:</span> <span class=\"hljs-string\">{host:</span> <span class=\"hljs-string\">demo,</span> <span class=\"hljs-attr\">subset:</span> <span class=\"hljs-string\">testing-trunk}</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">testing</span> <span class=\"hljs-comment\"># 没有match，兜底逻辑，上述不满足后一定会被匹配到。</span>\n          <span class=\"hljs-attr\">route:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">destination:</span> <span class=\"hljs-string\">{host:</span> <span class=\"hljs-string\">demo,</span> <span class=\"hljs-attr\">subset:</span> <span class=\"hljs-string\">testing}</span>\n      <span class=\"hljs-attr\">services:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">{exact:</span> <span class=\"hljs-string\">com.apache.dubbo.sample.basic.IGreeter}</span>\n  <span class=\"hljs-attr\">hosts:</span> <span class=\"hljs-string\">[demo]</span> <span class=\"hljs-comment\"># 匹配dest_rule.yml里面的 host 为demo</span>\n</code></pre>\n<h5>1.2 destination-rule</h5>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">service.dubbo.apache.org/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DestinationRule</span>\n<span class=\"hljs-attr\">metadata:</span> <span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">demo-route</span> <span class=\"hljs-string\">}</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">demo</span>\n  <span class=\"hljs-attr\">subsets:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">labels:</span> <span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">env-sign:</span> <span class=\"hljs-string\">xxx,</span> <span class=\"hljs-attr\">tag1:</span> <span class=\"hljs-string\">hello</span> <span class=\"hljs-string\">}</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">isolation</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">labels:</span> <span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">env-sign:</span> <span class=\"hljs-string\">yyy</span> <span class=\"hljs-string\">}</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">testing-trunk</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">labels:</span> <span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">env-sign:</span> <span class=\"hljs-string\">zzz</span> <span class=\"hljs-string\">}</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">testing</span>\n  <span class=\"hljs-attr\">trafficPolicy:</span>\n    <span class=\"hljs-attr\">loadBalancer:</span> <span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">simple:</span> <span class=\"hljs-string\">ROUND_ROBIN</span> <span class=\"hljs-string\">}</span>\n</code></pre>\n<h4>2. client、server 路由参数设置</h4>\n<ul>\n<li>\n<p>client 端</p>\n<p>dubbogo.yml</p>\n<p>定义配置中心</p>\n</li>\n</ul>\n<pre><code class=\"language-yaml\">  <span class=\"hljs-attr\">config-center:</span>\n    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">zookeeper</span>\n    <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:2181</span>\n    <span class=\"hljs-attr\">data-id:</span> <span class=\"hljs-string\">\"dubbo-go-samples-configcenter-zookeeper-client\"</span>\n</code></pre>\n<p>在代码中通过 API 将配置发布至配置中心，也可预先手动配置。</p>\n<pre><code class=\"language-go\">dynamicConfiguration, err := config.GetRootConfig().ConfigCenter.GetDynamicConfiguration()\n<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n  <span class=\"hljs-built_in\">panic</span>(err)\n}\n\n<span class=\"hljs-comment\">// publish mesh route config</span>\nerr = dynamicConfiguration.PublishConfig(<span class=\"hljs-string\">\"dubbo.io.MESHAPPRULE\"</span>, <span class=\"hljs-string\">\"dubbo\"</span>, MeshRouteConf)\n<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n  <span class=\"hljs-keyword\">return</span>\n}\n</code></pre>\n<p>server 端</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">registries:</span>\n    <span class=\"hljs-attr\">demoZK:</span>\n      <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">zookeeper</span>\n      <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">3s</span>\n      <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:2181</span>\n  <span class=\"hljs-attr\">protocols:</span>\n    <span class=\"hljs-attr\">triple:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">tri</span>\n      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">20000</span>\n  <span class=\"hljs-attr\">provider:</span>\n    <span class=\"hljs-attr\">registry-ids:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">demoZK</span>\n    <span class=\"hljs-attr\">services:</span>\n      <span class=\"hljs-attr\">GreeterProvider:</span>\n        <span class=\"hljs-attr\">protocol-ids:</span> <span class=\"hljs-string\">triple</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">com.apache.dubbo.sample.basic.IGreeter</span> <span class=\"hljs-comment\"># must be compatible with grpc or dubbo-java</span>\n        <span class=\"hljs-attr\">params:</span>\n          <span class=\"hljs-attr\">env-sign:</span> <span class=\"hljs-string\">zzz</span> <span class=\"hljs-comment\"># server label, 对应 destination Rule中的testing，即兜底逻辑</span>\n</code></pre>\n<h4>3. 运行方法</h4>\n<p>直接使用goland运行本示例</p>\n<p>运行后，可观测到所有客户端流量都路由至 server，根据source label，没有命中的virtualService，因此路由至兜底testing。</p>\n",
  "link": "/zh-cn/docs/user/samples/mesh_router.html",
  "meta": {
    "title": "Dubbo-go v3 统一路由规则",
    "keywords": "dubbogo，v3，路由规则",
    "description": "提示用户dubbo使用的路由协议，介绍dubbogov3采用的统一路由规则"
  }
}