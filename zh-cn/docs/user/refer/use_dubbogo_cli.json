{
  "filename": "use_dubbogo_cli.md",
  "__html": "<h1>dubbogo-cli 工具</h1>\n<h2>1. 安装</h2>\n<p>dubbogo-cli 是 Apach/dubbo-go 生态的子项目，为开发者提供便利的应用模板创建、工具安装、接口调试等功能，以提高用户的研发效率。</p>\n<p>执行以下指令安装dubbogo-cli 至 $GOPATH/bin</p>\n<pre><code>go install github.com/dubbogo/dubbogo-cli@latest\n</code></pre>\n<h2>2. 功能概览</h2>\n<p>dubbogo-cli 支持以下能力</p>\n<ul>\n<li>\n<p>应用模板创建</p>\n<pre><code>dubbogo-cli newApp .\n</code></pre>\n<p>在当前目录下创建应用模板</p>\n</li>\n<li>\n<p>Demo 创建</p>\n<pre><code>dubbogo-cli newDemo .\n</code></pre>\n<p>在当前目录下创建 RPC 示例，包含一个客户端和一个服务端</p>\n</li>\n<li>\n<p>编译、调试工具安装</p>\n<pre><code>dubbogo-cli install all\n</code></pre>\n<p>一键安装以下等工具至 $GOPATH/bin</p>\n<ul>\n<li>\n<p>protoc-gen-go-triple</p>\n<p>用于 triple 协议接口编译</p>\n</li>\n<li>\n<p>imports-formatter</p>\n<p>用于整理代码 import 块。</p>\n<p><a href=\"https://github.com/dubbogo/tools#imports-formatter\">import-formatte README</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p>查看 dubbo-go 应用注册信息</p>\n<ul>\n<li>\n<p>查看 Zookeeper 上面的注册信息, 获取接口及方法列表</p>\n<pre><code class=\"language-bash\">$ dubbogo-cli show --r zookeeper --h 127.0.0.1:2181\ninterface: com.dubbogo.pixiu.UserService\nmethods: [CreateUser,GetUserByCode,GetUserByName,GetUserByNameAndAge,GetUserTimeout,UpdateUser,UpdateUserByName]\n</code></pre>\n</li>\n<li>\n<p>查看 Nacos 上面的注册信息 【功能开发中】</p>\n</li>\n<li>\n<p>查看 Istio 的注册信息【功能开发中】</p>\n</li>\n</ul>\n</li>\n<li>\n<p>调试 Dubbo 协议接口</p>\n</li>\n<li>\n<p>调试 Triple 协议接口</p>\n</li>\n</ul>\n<h2>3. 功能详解</h2>\n<h3>3.1 Demo 应用介绍</h3>\n<h4>3.1.1 Demo 创建</h4>\n<pre><code>dubbogo-cli newDemo .\n</code></pre>\n<p>在当前目录下创建Demo, 包含客户端和服务端，该 Demo 展示了基于一套接口，完成一次 RPC 调用。</p>\n<p>该Demo 使用直连模式，无需依赖注册中心，server端暴露服务到本地20000端口，客户端发起调用。</p>\n<pre><code class=\"language-shell\">.\n├── api\n│   ├── samples_api.pb.go \n│   ├── samples_api.proto\n│   └── samples_api_triple.pb.go\n├── go-client\n│   ├── cmd\n│   │   └── client.go\n│   └── conf\n│       └── dubbogo.yaml\n├── go-server\n│   ├── cmd\n│   │   └── server.go\n│   └── conf\n│       └── dubbogo.yaml\n└── go.mod\n</code></pre>\n<h4>3.1.2 运行Demo</h4>\n<p>开启服务端</p>\n<pre><code>$ cd go-server/cmd\n$ go run .\n</code></pre>\n<p>另一个终端开启客户端</p>\n<pre><code>$ go mod tidy\n$ cd go-client/cmd\n$ go run .\n\n</code></pre>\n<p>可看到打印日志</p>\n<pre><code>INFO    cmd/client.go:49        client response result: name:&quot;Hello laurence&quot; id:&quot;12345&quot; age:21\n</code></pre>\n<h3>3.2 应用模板介绍</h3>\n<h4>3.2.1 应用模板创建</h4>\n<pre><code>dubbogo-cli newApp .\n</code></pre>\n<p>在当前目录下创建应用模板:</p>\n<pre><code>.\n├── Makefile\n├── api\n│   ├── api.pb.go\n│   ├── api.proto\n│   └── api_triple.pb.go\n├── build\n│   └── Dockerfile\n├── chart\n│   ├── app\n│   │   ├── Chart.yaml\n│   │   ├── templates\n│   │   │   ├── _helpers.tpl\n│   │   │   ├── deployment.yaml\n│   │   │   ├── service.yaml\n│   │   │   └── serviceaccount.yaml\n│   │   └── values.yaml\n│   └── nacos_env\n│       ├── Chart.yaml\n│       ├── templates\n│       │   ├── _helpers.tpl\n│       │   ├── deployment.yaml\n│       │   └── service.yaml\n│       └── values.yaml\n├── cmd\n│   └── app.go\n├── conf\n│   └── dubbogo.yaml\n├── go.mod\n├── go.sum\n└── pkg\n    └── service\n        └── service.go\n\n</code></pre>\n<h4>3.2.2 应用模板介绍</h4>\n<p>生成项目包括几个目录：</p>\n<ul>\n<li>\n<p>api：放置接口文件：proto文件和生成的.pb.go文件</p>\n</li>\n<li>\n<p>build：放置镜像构建相关文件</p>\n</li>\n<li>\n<p>chart：放置发布用 chart 仓库、基础环境chart 仓库：nacos、mesh（开发中）</p>\n</li>\n<li>\n<p>cmd：程序入口</p>\n</li>\n<li>\n<p>conf：框架配置</p>\n</li>\n<li>\n<p>pkg/service：RPC 服务实现</p>\n</li>\n<li>\n<p>Makefile：</p>\n</li>\n<li>\n<ul>\n<li>镜像、helm部署名：</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<ul>\n<li>IMAGE = <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>y</mi><mi>o</mi><mi>u</mi><msub><mi>r</mi><mi>r</mi></msub><mi>e</mi><mi>p</mi><mi>o</mi><mo>)</mo><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">(your_repo)/</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathit\">o</span><span class=\"mord mathit\">u</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:-0.02778em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mord mathit\">e</span><span class=\"mord mathit\">p</span><span class=\"mord mathit\">o</span><span class=\"mclose\">)</span><span class=\"mord mathrm\">/</span></span></span></span>(namespace)/$(image_name)\nTAG = 1.0.0</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>HELM_INSTALL_NAME = dubbo-go-app，helm 安装名，用于 helm install/uninstall 命令。</p>\n</li>\n<li>\n<ul>\n<li>提供脚本，例如：</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<ul>\n<li>make build # 打包镜像并推送</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>make buildx-publish # arm架构本地打包amd64镜像并推送，依赖 docker buildx</p>\n</li>\n<li>\n<p>make deploy  # 通过 helm 发布应用</p>\n</li>\n<li>\n<p>make remove  # 删除已经发布的 helm 应用</p>\n</li>\n<li>\n<p>make proto-gen # api下生成 pb.go 文件</p>\n</li>\n<li></li>\n</ul>\n<p>使用应用模板的开发流程</p>\n<blockquote>\n<p>依赖环境：make、go、helm、kubectl、docker</p>\n</blockquote>\n<ol>\n<li>通过 dubbogo-cli 生成模板</li>\n<li>修改api/api.proto</li>\n<li>make proto-gen</li>\n<li>开发接口</li>\n<li>修改 makefile 内 IMAGE 镜像名和 HELM_INSTALL_NAME 发布名</li>\n<li>打镜像并推送</li>\n<li>修改chart/app/values 内与部署相关的value配置, 重点关注镜像部分。</li>\n</ol>\n<pre><code>image:\n  repository: $(your_repo)/$(namespace)/$(image_name)\n  pullPolicy: Always\n  tag: &quot;1.0.0&quot;\n</code></pre>\n<ol start=\"8\">\n<li>make deploy, 使用 helm 发布应用。</li>\n</ol>\n<h3>3.3 以 gRPC 协议调试 dubbo-go 应用</h3>\n<h4>3.3.1 简介</h4>\n<p>grpc_cli 工具是 gRPC 生态用于调试服务的工具，在 server 开启<a href=\"https://github.com/grpc/grpc/blob/master/doc/server-reflection.md\">反射服务</a>的前提下，可以获取到服务的 proto 文件、服务名、方法名、参数列表，以及发起 gRPC 调用。</p>\n<p>Triple 协议兼容 gRPC 生态，并默认开启 gRPC 反射服务，因此可以直接使用 grpc_cli 调试 triple 服务。</p>\n<h4>3.3.2 安装grpc_cli</h4>\n<blockquote>\n<p>后续将由 dubbogo-cli 安装，目前需要用户手动安装</p>\n</blockquote>\n<p>参考<a href=\"https://github.com/grpc/grpc/blob/master/doc/command_line_tool.md\">grpc_cli 文档</a></p>\n<h4>3.3.3 使用 grpc_cli 对 Triple 服务进行调试</h4>\n<ol>\n<li>查看 triple 服务的接口定义</li>\n</ol>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> grpc_cli ls localhost:20001 -l</span>\nfilename: helloworld.proto\npackage: org.apache.dubbo.quickstart.samples;\nservice UserProvider {\n  rpc SayHello(org.apache.dubbo.quickstart.samples.HelloRequest) returns (org.apache.dubbo.quickstart.samples.User) {}\n  rpc SayHelloStream(stream org.apache.dubbo.quickstart.samples.HelloRequest) returns (stream org.apache.dubbo.quickstart.samples.User) {}\n}\n</code></pre>\n<ol start=\"2\">\n<li>查看请求参数类型</li>\n</ol>\n<p>例如开发者期望测试上述端口的 SayHello 方法，尝试获取HelloRequest的具体定义，需要执行r如下指令，可查看到对应参数的定义。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> grpc_cli <span class=\"hljs-built_in\">type</span> localhost:20001 org.apache.dubbo.quickstart.samples.HelloRequest</span>\nmessage HelloRequest {\n  string name = 1 [json_name = \"name\"];\n}\n</code></pre>\n<ol start=\"3\">\n<li>请求接口</li>\n</ol>\n<p>已经知道了请求参数的具体类型，可以发起调用来测试对应服务。查看返回值是否符合预期。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> grpc_cli call localhost:20001 SayHello <span class=\"hljs-string\">\"name: 'laurence'\"</span></span>\nconnecting to localhost:20001\nname: \"Hello laurence\"\nid: \"12345\"\nage: 21\nReceived trailing metadata from server:\naccept-encoding : identity,gzip\nadaptive-service.inflight : 0\nadaptive-service.remaining : 50\ngrpc-accept-encoding : identity,deflate,gzip\nRpc succeeded with OK status\n</code></pre>\n<h3>3.4 以 Dubbo 协议调试dubbo-go 应用</h3>\n<h4>3.4.1 开启 Dubbo 服务端</h4>\n<p>示例：user.go:</p>\n<pre><code>func (u *UserProvider) GetUser(ctx context.Context, userStruct *CallUserStruct) (*User, error) {\n\tfmt.Printf(&quot;=======================\\nreq:%#v\\n&quot;, userStruct)\n\trsp := User{&quot;A002&quot;, &quot;Alex Stocks&quot;, 18, userStruct.SubInfo}\n\tfmt.Printf(&quot;=======================\\nrsp:%#v\\n&quot;, rsp)\n\treturn &amp;rsp, nil\n}\n</code></pre>\n<p>服务端开启一个服务，名为GetUser，传入一个CallUserStruct的参数，返回一个User参数\nCallUserStruct参数定义：</p>\n<pre><code>type CallUserStruct struct {\n\tID      string\n\tMale    bool\n\tSubInfo SubInfo // 嵌套子结构\n}\nfunc (cs CallUserStruct) JavaClassName() string {\n\treturn &quot;com.ikurento.user.CallUserStruct&quot;\n}\n\ntype SubInfo struct {\n\tSubID   string\n\tSubMale bool\n\tSubAge  int\n}\n\nfunc (s SubInfo) JavaClassName() string {\n\treturn &quot;com.ikurento.user.SubInfo&quot;\n}\n</code></pre>\n<p>User结构定义：</p>\n<pre><code>type User struct {\n\tId      string\n\tName    string\n\tAge     int32\n\tSubInfo SubInfo // 嵌套上述子结构SubInfo\n}\n\nfunc (u *User) JavaClassName() string {\n\treturn &quot;com.ikurento.user.User&quot;\n}\n</code></pre>\n<p>开启服务：</p>\n<pre><code>cd server`\n`source builddev.sh`\n`go run .\n</code></pre>\n<h4>3.4.2 定义请求体 (适配于序列化协议)</h4>\n<p>请求体定义为json文件，约定键值均为string\n键对应go语言struct字段名例如&quot;ID&quot;、&quot;Name&quot; ，值对应&quot;type@val&quot;\n其中type支持string int bool time，val使用string 来初始化，如果只填写type则初始化为零值。 约定每个struct必须有JavaClassName字段，务必与server端严格对应</p>\n<p>见userCall.json:</p>\n<pre><code>{\n  &quot;ID&quot;: &quot;string@A000&quot;,\n  &quot;Male&quot;: &quot;bool@true&quot;,\n  &quot;SubInfo&quot;: {\n    &quot;SubID&quot;: &quot;string@A001&quot;,\n    &quot;SubMale&quot;: &quot;bool@false&quot;,\n    &quot;SubAge&quot;: &quot;int@18&quot;,\n    &quot;JavaClassName&quot;:&quot;string@com.ikurento.user.SubInfo&quot;\n  },\n  &quot;JavaClassName&quot;: &quot;string@com.ikurento.user.CallUserStruct&quot;\n}\n</code></pre>\n<p>userCall.json将参数CallUserStruct的结构及子结构SubInfo都定义了出来，并且给请求参数赋值。</p>\n<p>user.json 同理，作为返回值不需要赋初始值，但JavaClassName字段一定与server端严格对应</p>\n<pre><code>{\n  &quot;ID&quot;: &quot;string&quot;,\n  &quot;Name&quot;: &quot;string&quot;,\n  &quot;Age&quot;: &quot;int&quot;,\n  &quot;JavaClassName&quot;:  &quot;string@com.ikurento.user.User&quot;,\n  &quot;SubInfo&quot;: {\n    &quot;SubID&quot;: &quot;string&quot;,\n    &quot;SubMale&quot;: &quot;bool&quot;,\n    &quot;SubAge&quot;: &quot;int&quot;,\n    &quot;JavaClassName&quot;:&quot;string@com.ikurento.user.SubInfo&quot;\n  }\n}\n</code></pre>\n<h4>3.4.3 调试端口</h4>\n<pre><code>./dubbo-go-cli -h=localhost -p=20001 -proto=dubbo -i=com.ikurento.user.UserProvider -method=GetUser -sendObj=&quot;./userCall.json&quot; -recvObj=&quot;./user.json&quot;\n</code></pre>\n<p>打印结果：</p>\n<pre><code>2020/10/26 20:47:45 Created pkg:\n2020/10/26 20:47:45 &amp;{ID:A000 Male:true SubInfo:0xc00006ea20 JavaClassName:com.ikurento.user.CallUserStruct}\n2020/10/26 20:47:45 SubInfo:\n2020/10/26 20:47:45 &amp;{SubID:A001 SubMale:false SubAge:18 JavaClassName:com.ikurento.user.SubInfo}\n\n\n2020/10/26 20:47:45 Created pkg:\n2020/10/26 20:47:45 &amp;{ID: Name: Age:0 JavaClassName:com.ikurento.user.User SubInfo:0xc00006ec90}\n2020/10/26 20:47:45 SubInfo:\n2020/10/26 20:47:45 &amp;{SubID: SubMale:false SubAge:0 JavaClassName:com.ikurento.user.SubInfo}\n\n\n2020/10/26 20:47:45 connected to localhost:20001!\n2020/10/26 20:47:45 try calling interface:com.ikurento.user.UserProvider.GetUser\n2020/10/26 20:47:45 with protocol:dubbo\n\n2020/10/26 20:47:45 After 3ms , Got Rsp:\n2020/10/26 20:47:45 &amp;{ID:A002 Name:Alex Stocks Age:18 JavaClassName: SubInfo:0xc0001241b0}\n2020/10/26 20:47:45 SubInfo:\n2020/10/26 20:47:45 &amp;{SubID:A001 SubMale:false SubAge:18 JavaClassName:}```\n</code></pre>\n<p>可看到详细的请求体赋值情况，以及返回结果和耗时。支持嵌套结构</p>\n<p>server端打印结果</p>\n<pre><code>=======================\nreq:&amp;main.CallUserStruct{ID:&quot;A000&quot;, Male:true, SubInfo:main.SubInfo{SubID:&quot;A001&quot;, SubMale:false, SubAge:18}}\n=======================\n</code></pre>\n<p>可见接收到了来自cli的数据</p>\n<p>下一章：<a href=\"./quickstart_dubbo.html\">【Dubbo 协议快速开始】</a></p>\n",
  "link": "/zh-cn/docs/user/refer/use_dubbogo_cli.html",
  "meta": {
    "title": "使用 dubbogo-cli 工具",
    "keywords": "使用 dubbogo-cli 工具",
    "description": "使用 dubbogo-cli 工具"
  }
}