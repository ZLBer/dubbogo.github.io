{
  "filename": "custom-filter.md",
  "__html": "<h1>Dubbogo 3.0 自定义Filter组件</h1>\n<p>参考samples <a href=\"https://github.com/apache/dubbo-go-samples/tree/master/filter\">dubbo-go-samples/filter</a></p>\n<h2>1. Filter 概念</h2>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// Filter interface defines the functions of a filter</span>\n<span class=\"hljs-comment\">// Extension - Filter</span>\n<span class=\"hljs-keyword\">type</span> Filter <span class=\"hljs-keyword\">interface</span> {\n\t<span class=\"hljs-comment\">// Invoke is the core function of a filter, it determines the process of the filter</span>\n\tInvoke(context.Context, protocol.Invoker, protocol.Invocation) protocol.Result\n\t<span class=\"hljs-comment\">// OnResponse updates the results from Invoke and then returns the modified results.</span>\n\tOnResponse(context.Context, protocol.Result, protocol.Invoker, protocol.Invocation) protocol.Result\n}\n</code></pre>\n<p>Filter 可以加载在 Consumer 端或者 Provider端。当加载在 Consumer 端，其Invoke函数调用的下游为网络层，OnResponse 为请求结束从网络层获取到返回结果后被调用。当加载在 Provider 端，其 Invoke 函数调用的下游为用户代码，OnResponse 为用户代码执行结束后向下传递至网络层前被调用。</p>\n<p>Filter 采用面向切面设计的思路，通过对 Filter 的合理扩展，可以记录日志、设置数据打点，记录 invoker 所对应服务端性能，限流等等工作。</p>\n<h2>2. 框架预定义 Filter</h2>\n<p>框架预定义了一系列filter，可以在配置中直接使用，其代码实现位于<a href=\"https://github.com/apache/dubbo-go/tree/3.0/filter\">filter</a></p>\n<ul>\n<li>accesslog</li>\n<li>active</li>\n<li>sign: AuthConsumerFilter</li>\n<li>auth: AuthProviderFilter</li>\n<li>echo</li>\n<li>execute: ExecuteLimitFilter</li>\n<li>generic: GenericFilter</li>\n<li>generic_service: GenericServiceFilter</li>\n<li>pshutdown: GracefulShutdownProviderFilter</li>\n<li>cshutdown: GracefulShutdownConsumerFilter</li>\n<li>hystrix_consumer: HystrixConsumerFilter</li>\n<li>hystrix_provider: HystrixProviderFilter</li>\n<li>metrics</li>\n<li>seata</li>\n<li>sentinel-provider</li>\n<li>sentinel-consumer</li>\n<li>token</li>\n<li>tps</li>\n<li>tracing</li>\n</ul>\n<h2>3. 默认加载Filter</h2>\n<p>用户在配置文件中配置了将要使用的 Filter 时，框架使用用户配置的 Filter，否则则加载默认Filter：</p>\n<ul>\n<li>\n<p>Consumer:</p>\n<p>cshutdown</p>\n</li>\n<li>\n<p>Provider:</p>\n<p>echo, metrics, token, accesslog, tps, generic_service, executivete, pshutdown</p>\n</li>\n</ul>\n<h2>4. 用户指定 Filter</h2>\n<p>指定filter时可用','分隔</p>\n<ul>\n<li>\n<p>Consumer 端</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">consumer:</span>\n    <span class=\"hljs-attr\">filter:</span> <span class=\"hljs-string\">echo,token,tps,myCustomFilter</span> <span class=\"hljs-comment\"># 可指定自定义filter</span>\n</code></pre>\n</li>\n<li>\n<p>Provider 端</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">provider:</span>\n    <span class=\"hljs-attr\">services:</span>\n      <span class=\"hljs-attr\">GreeterProvider:</span>\n        <span class=\"hljs-attr\">filter:</span> <span class=\"hljs-string\">myCustomFilter,echo,tps</span>\n</code></pre>\n</li>\n</ul>\n<h2>5. 自定义Filter</h2>\n<p>用户可在代码中自定义 Filter，注册到框架上，并在配置中选择使用。</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span> {\n\textension.SetFilter(<span class=\"hljs-string\">\"myCustomFilter\"</span>, NewMyClientFilter)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewMyClientFilter</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">filter</span>.<span class=\"hljs-title\">Filter</span></span> {\n\t<span class=\"hljs-keyword\">return</span> &amp;MyClientFilter{}\n}\n\n<span class=\"hljs-keyword\">type</span> MyClientFilter <span class=\"hljs-keyword\">struct</span> {\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *MyClientFilter)</span> <span class=\"hljs-title\">Invoke</span><span class=\"hljs-params\">(ctx context.Context, invoker protocol.Invoker, invocation protocol.Invocation)</span> <span class=\"hljs-title\">protocol</span>.<span class=\"hljs-title\">Result</span></span> {\n\tfmt.Println(<span class=\"hljs-string\">\"MyClientFilter Invoke is called, method Name = \"</span>, invocation.MethodName())\n\t<span class=\"hljs-keyword\">return</span> invoker.Invoke(ctx, invocation)\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *MyClientFilter)</span> <span class=\"hljs-title\">OnResponse</span><span class=\"hljs-params\">(ctx context.Context, result protocol.Result, invoker protocol.Invoker, protocol protocol.Invocation)</span> <span class=\"hljs-title\">protocol</span>.<span class=\"hljs-title\">Result</span></span> {\n\tfmt.Println(<span class=\"hljs-string\">\"MyClientFilter OnResponse is called\"</span>)\n\t<span class=\"hljs-keyword\">return</span> result\n}\n\n</code></pre>\n<p>下一章: <a href=\"./registry.html\">【注册中心配置】</a></p>\n",
  "link": "/zh-cn/docs/user/samples/custom-filter.html",
  "meta": {
    "title": "dubbogo 3.0 自定义filter",
    "keywords": "dubbogo 3.0 自定义filter",
    "description": "dubbogo 3.0 自定义filter"
  }
}