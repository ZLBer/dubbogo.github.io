{
  "filename": "app.md",
  "__html": "<h1>在 Istio 环境部署 Dubbo-go 应用</h1>\n<p>在本章节中，我们将使用应用模板快速创建一组 Dubbo-go Server和 Client 端应用，部署在 Istio 集群中；观察、调试和验证服务发现和调用成功。</p>\n<h2>1. 准备工作</h2>\n<ul>\n<li>dubbo-go cli 工具和依赖工具已安装、grpc_cli (如需本地调试)。</li>\n<li>docker、helm、kubectl 环境已安装。（arm 机器需支持 docker buildx）</li>\n<li><a href=\"./build.html\">任务【istio 环境部署】</a> 已完成</li>\n</ul>\n<h2>2. 开发 server 端 Dubbo-go 应用</h2>\n<h3>2.1 使用 dubbogo-cli 创建项目模板</h3>\n<pre><code class=\"language-plain\">$ mkdir mesh-app-server\n$ cd mesh-app-server\n$ dubbogo-cli newApp . \n$  tree .\n.\n├── Makefile\n├── api\n│   └── api.proto\n├── build\n│   └── Dockerfile\n├── chart\n│   ├── app\n│   │   ├── Chart.yaml\n│   │   ├── templates\n│   │   │   ├── _helpers.tpl\n│   │   │   ├── deployment.yaml\n│   │   │   ├── service.yaml\n│   │   │   └── serviceaccount.yaml\n│   │   └── values.yaml\n│   └── nacos_env\n│       ├── Chart.yaml\n│       ├── templates\n│       │   ├── _helpers.tpl\n│       │   ├── deployment.yaml\n│       │   └── service.yaml\n│       └── values.yaml\n├── cmd\n│   └── app.go\n├── conf\n│   └── dubbogo.yaml\n├── go.mod\n├── go.sum\n└── pkg\n    └── service\n        └── service.go\n</code></pre>\n<p>生成项目包括几个目录：</p>\n<ul>\n<li>\n<p>api：放置接口文件：proto文件和生成的pb.go文件</p>\n</li>\n<li>\n<p>build：放置构建相关文件</p>\n</li>\n<li>\n<p>chart：放置发布用 chart 仓库、基础环境chart 仓库：nacos、mesh（开发中）</p>\n</li>\n<li>\n<p>cmd：程序入口</p>\n</li>\n<li>\n<p>conf：框架配置</p>\n</li>\n<li>\n<p>pkg/service：RPC 服务实现</p>\n</li>\n<li>\n<p>Makefile：</p>\n</li>\n<li>\n<ul>\n<li>镜像、Helm 安装名称：</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<pre><code>IMAGE = $(your_repo)/$(namespace)/$(image_name)\nTAG = 1.0.0\nHELM_INSTALL_NAME = dubbo-go-app \n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>提供脚本，例如：</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<ul>\n<li>make build # 打包镜像并推送</li>\n<li>make buildx-publish # arm架构本地打包amd64镜像并推送，依赖buildx</li>\n<li>make deploy  # 通过 helm 发布应用</li>\n<li>make remove  # 删除已经发布的 helm 应用</li>\n<li>make proto-gen # api下生成 pb.go 文件</li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>2.2 开发和部署 Dubbo-go 应用：</h3>\n<h4>开发应用</h4>\n<ul>\n<li>\n<p>编译接口</p>\n<p>开发人员需要修改 proto 文件，本任务中直接使用默认接口即可。</p>\n<pre><code class=\"language-bash\">$ make proto-gen\nprotoc --go_out=./api --go-triple_out=./api ./api/api.proto\n</code></pre>\n</li>\n<li>\n<p>拉取依赖</p>\n<pre><code class=\"language-bash\">$ go get dubbo.apache.org/dubbo-go/v3@3.0\n$ make tidy\ngo mod tidy\n</code></pre>\n</li>\n<li>\n<p>编写业务逻辑</p>\n<p>修改 pkg/service/service.go 实现函数, 返回字符串中显示版本为 v1.0.0</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *GreeterServerImpl)</span> <span class=\"hljs-title\">SayHello</span><span class=\"hljs-params\">(ctx context.Context, in *api.HelloRequest)</span> <span class=\"hljs-params\">(*api.User, error)</span></span> {\n\t<span class=\"hljs-keyword\">return</span> &amp;api.User{Name: <span class=\"hljs-string\">\"Hello \"</span> + in.Name, Id: <span class=\"hljs-string\">\"v1.0.0\"</span>}, <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n</li>\n<li>\n<p>修改配置如下字段，从而使用xds协议作为注册中心</p>\n<p>conf/dubbogo.yaml</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">registries:</span>\n    <span class=\"hljs-attr\">xds:</span>\n      <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">xds</span>\n      <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">istiod.istio-system.svc.cluster.local:15010</span>\n  <span class=\"hljs-attr\">protocols:</span>\n    <span class=\"hljs-attr\">triple:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">tri</span>\n      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">20000</span>\n  <span class=\"hljs-attr\">provider:</span>\n    <span class=\"hljs-attr\">services:</span>\n      <span class=\"hljs-attr\">GreeterServerImpl:</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">\"\"</span> <span class=\"hljs-comment\"># read from stub</span>\n\n</code></pre>\n<p>至此，应用开发完成。</p>\n</li>\n</ul>\n<h4>配置构建和部署参数</h4>\n<ul>\n<li>\n<p>指定需要构建的镜像：</p>\n<p>修改 Makefile 如下字段，指定好需要构建的镜像地址和版本。</p>\n<p>指定好需要通过 helm 安装的名称。</p>\n<pre><code>IMAGE = xxx/dubbo-go-server\nTAG = 1.0.0\nHELM_INSTALL_NAME = dubbo-go-server-v1\n</code></pre>\n</li>\n<li>\n<p>指定需要部署的应用和镜像：</p>\n<p>修改 chart/app/Chart.yaml 如下字段，指定当前应用名为 <code>dubbo-go-server</code>，部署时会创建一个名为 dubbo-go-server 的 service ，关联当前应用的所有版本。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dubbo-go-server</span>\n<span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">dubbo-go-server</span>\n</code></pre>\n<p>修改 chart/app/values.yaml 如下字段，指定需要部署的镜像以及当前开发的应用版本 dubbogoAppVersion 为 v1。</p>\n<p>部署的镜像需要和上述构建的镜像一致。当前应用版本用于 mesh 流量规则控制。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">image:</span>\n  <span class=\"hljs-attr\">repository:</span>  <span class=\"hljs-string\">xxx/dubbo-go-server</span>\n  <span class=\"hljs-attr\">pullPolicy:</span> <span class=\"hljs-string\">Always</span>\n  <span class=\"hljs-attr\">tag:</span> <span class=\"hljs-string\">\"1.0.0\"</span>\n\n<span class=\"hljs-comment\"># Dubbo-go-mesh version control labels</span>\n<span class=\"hljs-attr\">version:</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">dubbogoAppVersion:</span> <span class=\"hljs-string\">v1</span>\n</code></pre>\n<p>至此，构建参数和发布参数都已指定好，可以进行构建和部署了。</p>\n</li>\n</ul>\n<h4>使用模板构建和部署 Dubbo-go 应用</h4>\n<ul>\n<li>\n<p>构建、推送镜像</p>\n<p><code>$ make build</code>   (本地为 amd64机器)</p>\n<p>或者</p>\n<p><code>$ make buildx-publish</code>     (本地为 arm64机器，依赖 docker buildx 命令)</p>\n</li>\n<li>\n<p>发布 Dubbo-go 应用至集群</p>\n<pre><code class=\"language-bash\">$ make deploy \nhelm install dubbo-go-server-v1 ./chart/app\nNAME: dubbo-go-server-v1\nLAST DEPLOYED: Thu Apr  7 11:19:42 2022\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\n$ helm list\nNAME                    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART                   APP VERSION\ndubbo-go-server-v1      default         1               2022-04-07 11:19:42.350553 +0800 CST    deployed        dubbo-go-server-0.0.1   1.16.0  \n</code></pre>\n<p>可看到通过 helm 部署成功</p>\n</li>\n</ul>\n<h3>2.3 验证应用</h3>\n<h4>查看资源部署情况</h4>\n<p>查看部署好的 deployment ，版本为 v1。</p>\n<pre><code class=\"language-bash\">$ kubectl get deployment \nNAME                 READY   UP-TO-DATE   AVAILABLE   AGE\ndubbo-go-server-v1   1/1     1            1           26s\n</code></pre>\n<p>查看部署好的 service。</p>\n<pre><code class=\"language-bash\">$ kubectl get svc \nNAME              TYPE        CLUSTER-IP        EXTERNAL-IP   PORT(S)     AGE\ndubbo-go-server   ClusterIP   192.168.216.253   &lt;none&gt;        20000/TCP   70s\n</code></pre>\n<h4>（*可选）本地调试部署好的 Dubbo-go 应用</h4>\n<p>使用 kubectl port-forward Dubbo-go 应用到本地</p>\n<pre><code class=\"language-bash\">$ kubectl port-forward svc/dubbo-go-server 20000\nForwarding from 127.0.0.1:20000 -&gt; 20000\nForwarding from [::1]:20000 -&gt; 20000\n</code></pre>\n<p>使用 grpc_cli 调试集群内的应用，参考任务<a href=\"../debug/grpc_cli.html\">【使用 grpc_cli 调试 Dubbo-go 应用】</a></p>\n<pre><code class=\"language-bash\">$ grpc_cli ls localhost:20000 -l\nfilename: api/api.proto\npackage: api;\nservice Greeter {\n  rpc SayHello(api.HelloRequest) returns (api.User) {}\n  rpc SayHelloStream(stream api.HelloRequest) returns (stream api.User) {}\n}\n</code></pre>\n<p>使用 grpc_cli 发起调用，测试接口</p>\n<pre><code class=\"language-bash\">$ grpc_cli call localhost:20000 SayHello <span class=\"hljs-string\">\"name: 'laurence'\"</span>\nconnecting to localhost:20000\nname: <span class=\"hljs-string\">\"Hello laurence\"</span>\nid: <span class=\"hljs-string\">\"v1.0.0\"</span>\nReceived trailing metadata from server:\naccept-encoding : identity,gzip\ngrpc-accept-encoding : identity,deflate,gzip\nRpc succeeded with OK status\n</code></pre>\n<p>至此，我们成功开发了一个应用，把它部署在了 istio 集群内。</p>\n<h2>3. 开发 Client 端 Dubbo-go 应用</h2>\n<h3>3.1 使用 dubbogo-cli 创建另一个项目模板</h3>\n<pre><code class=\"language-bash\">$ dubbogo-cli newApp . \n</code></pre>\n<h3>3.2 开发和部署客户端 Dubbo-go 应用：</h3>\n<h4>编写业务逻辑</h4>\n<ul>\n<li>修改 cmd/app.go 的 main 方法，针对下游接口每秒钟发起一次调用</li>\n</ul>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tclient := &amp;api.GreeterClientImpl{}\n\tconfig.SetConsumerService(client)\n\t<span class=\"hljs-keyword\">if</span> err := config.Load(); err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\trequest := &amp;api.HelloRequest{\n\t\tName: <span class=\"hljs-string\">\"laurence\"</span>,\n\t}\n\n\t<span class=\"hljs-keyword\">for</span>{\n\t\t<span class=\"hljs-keyword\">if</span> rsp, err := client.SayHello(context.Background(), request); err != <span class=\"hljs-literal\">nil</span>{\n\t\t\tlogger.Errorf(<span class=\"hljs-string\">\"call server error = %s\"</span>, err)\n\t\t}<span class=\"hljs-keyword\">else</span>{\n\t\t\tlogger.Infof(<span class=\"hljs-string\">\"call server response = %+v\"</span>, rsp)\n\t\t}\n\t\ttime.Sleep(time.Second)\n\t}\n}\n</code></pre>\n<ul>\n<li>\n<p>修改如下配置文件，使用xds协议作为注册中心，加载名为 GreeterClientImpl 的客户端服务。</p>\n<p>conf/dubbogo.yaml</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">registries:</span>\n    <span class=\"hljs-attr\">xds:</span>\n      <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">xds</span>\n      <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">istiod.istio-system.svc.cluster.local:15010</span>\n  <span class=\"hljs-attr\">consumer:</span>\n    <span class=\"hljs-attr\">references:</span>\n      <span class=\"hljs-attr\">GreeterClientImpl:</span>\n        <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">tri</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">\"\"</span> <span class=\"hljs-comment\"># read from stub</span>\n</code></pre>\n<p>至此，应用开发完成。</p>\n</li>\n</ul>\n<h4>配置构建和部署参数</h4>\n<ul>\n<li>\n<p>指定需要构建的镜像：</p>\n<p>修改 Makefile 如下字段，指定好需要构建的镜像地址和版本。</p>\n<p>指定好需要通过 helm 安装的名称。</p>\n<pre><code>IMAGE = xxx/dubbo-go-client\nTAG = 1.0.0\nHELM_INSTALL_NAME = dubbo-go-client\n</code></pre>\n</li>\n<li>\n<p>指定需要部署的应用和镜像：</p>\n<p>修改 chart/app/Chart.yaml 如下字段，指定当前应用名为 <code>dubbo-go-client</code>，部署时会创建一个名为 dubbo-go-client 的 service ，关联当前应用的所有版本。对于一个只有客户端的应用，可以不创建sevice，可以由开发者在模板中修改，本教程中我们默认创建。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dubbo-go-client</span>\n<span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">dubbo-go-client</span>\n</code></pre>\n<p>修改 chart/app/values.yaml 如下字段，指定需要部署的镜像以及当前开发的应用版本 dubbogoAppVersion 为 v1。</p>\n<p>部署的镜像需要和上述构建的镜像一致。当前应用版本用于 mesh 流量规则控制。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">image:</span>\n  <span class=\"hljs-attr\">repository:</span>  <span class=\"hljs-string\">xxx/dubbo-go-client</span>\n  <span class=\"hljs-attr\">pullPolicy:</span> <span class=\"hljs-string\">Always</span>\n  <span class=\"hljs-attr\">tag:</span> <span class=\"hljs-string\">\"1.0.0\"</span>\n\n<span class=\"hljs-comment\"># Dubbo-go-mesh version control labels</span>\n<span class=\"hljs-attr\">version:</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">dubbogoAppVersion:</span> <span class=\"hljs-string\">v1</span>\n</code></pre>\n<p>至此，构建参数和发布参数都已指定好，可以进行构建和部署了。</p>\n</li>\n</ul>\n<h4>使用模板构建和部署 Dubbo-go 应用</h4>\n<ul>\n<li>\n<p>构建、推送镜像</p>\n<p><code>$ make build</code>   (本地为 amd64机器)</p>\n<p>或者</p>\n<p><code>$ make buildx-publish</code>     (本地为 arm64机器，依赖 docker buildx 命令)</p>\n</li>\n<li>\n<p>发布 Dubbo-go Client 应用至集群</p>\n<pre><code class=\"language-bash\">$ make deploy \nhelm install dubbo-go-client ./chart/app\nNAME: dubbo-go-client\nLAST DEPLOYED: Thu Apr  7 11:49:55 2022\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\n$ helm list\nNAME                    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART                   APP VERSION\ndubbo-go-client         default         1               2022-04-07 11:49:55.517898 +0800 CST    deployed        dubbo-go-client-0.0.1   1.16.0     \ndubbo-go-server-v1      default         1               2022-04-07 11:23:18.397658 +0800 CST    deployed        dubbo-go-server-0.0.1   1.16.0\n</code></pre>\n<p>可看到通过 helm 部署成功, 目前已经在集群中存在 Client 和 Server 两个应用。</p>\n</li>\n</ul>\n<h3>3.3 验证应用</h3>\n<h4>查看资源部署情况</h4>\n<p>查看部署好的 client 和 server 两个 deployment。</p>\n<pre><code class=\"language-bash\">$ kubectl get deployment       \nNAME                 READY   UP-TO-DATE   AVAILABLE   AGE\ndubbo-go-client-v1   1/1     1            1           22m\ndubbo-go-server-v1   1/1     1            1           49m\n</code></pre>\n<p>查看客户端调用日志</p>\n<pre><code class=\"language-bash\">$ kubectl get pods  | grep client | awk <span class=\"hljs-string\">'{print $1}'</span> | xargs kubectl logs \n...\n2022-04-07T04:13:55.777Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T04:13:56.778Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T04:13:57.779Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T04:13:58.781Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T04:13:59.782Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T04:14:00.784Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n2022-04-07T04:14:01.785Z        INFO    cmd/app.go:29   call server response = name:<span class=\"hljs-string\">\"Hello laurence\"</span> id:<span class=\"hljs-string\">\"v1.0.0\"</span>\n</code></pre>\n<p>验证调用成功</p>\n<h2>4. 小结</h2>\n<p>dubbogo-cli 提供的应用模板可以方便地支持开发者进行镜像的构建、推送、部署。</p>\n<p>在 Istio 环境中，server 应用将自身服务信息注册在 Isito 上，由客户端监听 xds 资源，查询 istio debug 端口进行接口级别的服务发现。开发人员无需关心 service名、主机名、集群名等概念，只需要引入接口，发起调用即可。</p>\n",
  "link": "/zh-cn/docs/user/tasks/mesh/app.html",
  "meta": {
    "title": "Istio 环境部署 Dubbo-go 应用",
    "keywords": "Istio 环境部署 Dubbo-go 应用",
    "description": "Istio 环境部署 Dubbo-go 应用"
  }
}