{
  "filename": "app.md",
  "__html": "<h1>Istio 环境部署 Dubbo-go 应用</h1>\n<h2>1. 准备工作</h2>\n<ul>\n<li>dubbo-go cli 工具和依赖工具已安装</li>\n<li>docker、helm、kubectl 环境已安装。</li>\n<li>istio 环境已部署</li>\n</ul>\n<h2>2. 开发 server 端 Dubbo-go 应用</h2>\n<h3>2.1 使用 dubbogo-cli 创建项目模板</h3>\n<pre><code class=\"language-plain\">$ mkdir cli-create-server\n$ cd cli-create-server\n$ dubbogo-cli newApp . \n$  tree .\n.\n├── Makefile\n├── api\n│   └── api.proto\n├── build\n│   └── Dockerfile\n├── chart\n│   ├── app\n│   │   ├── Chart.yaml\n│   │   ├── templates\n│   │   │   ├── _helpers.tpl\n│   │   │   ├── deployment.yaml\n│   │   │   ├── service.yaml\n│   │   │   └── serviceaccount.yaml\n│   │   └── values.yaml\n│   └── nacos_env\n│       ├── Chart.yaml\n│       ├── templates\n│       │   ├── _helpers.tpl\n│       │   ├── deployment.yaml\n│       │   └── service.yaml\n│       └── values.yaml\n├── cmd\n│   └── app.go\n├── conf\n│   └── dubbogo.yaml\n├── go.mod\n├── go.sum\n└── pkg\n    └── service\n        └── service.go\n</code></pre>\n<p>生成项目包括几个目录：</p>\n<ul>\n<li>\n<p>api：放置接口文件：proto文件和生成的pb.go文件</p>\n</li>\n<li>\n<p>build：放置构建相关文件</p>\n</li>\n<li>\n<p>chart：放置发布用 chart 仓库、基础环境chart 仓库：nacos、mesh（开发中）</p>\n</li>\n<li>\n<p>cmd：程序入口</p>\n</li>\n<li>\n<p>conf：框架配置</p>\n</li>\n<li>\n<p>pkg/service：RPC 服务实现</p>\n</li>\n<li>\n<p>Makefile：</p>\n</li>\n<li>\n<ul>\n<li>镜像、应用名：</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<ul>\n<li>IMAGE = <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>y</mi><mi>o</mi><mi>u</mi><msub><mi>r</mi><mi>r</mi></msub><mi>e</mi><mi>p</mi><mi>o</mi><mo>)</mo><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">(your_repo)/</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathit\">o</span><span class=\"mord mathit\">u</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:-0.02778em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mord mathit\">e</span><span class=\"mord mathit\">p</span><span class=\"mord mathit\">o</span><span class=\"mclose\">)</span><span class=\"mord mathrm\">/</span></span></span></span>(namespace)/$(image_name)\nTAG = 1.0.0</li>\n<li>APPNAME = dubbo-go-app # 用于 helm 发布，对应 chart 名、应用名和服务名（service名）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>提供脚本，例如：</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<ul>\n<li>make build # 打包镜像并推送</li>\n<li>make buildx-publish # arm架构本地打包amd64镜像并推送，依赖buildx</li>\n<li>make deploy  # 通过 helm 发布应用</li>\n<li>make remove  # 删除已经发布的 helm 应用</li>\n<li>make proto-gen # api下生成 pb.go 文件</li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>2.2 开发和发布例子server：</h3>\n<ul>\n<li>编译接口</li>\n</ul>\n<pre><code class=\"language-plain\">$ make proto-gen\nprotoc --go_out=./api --go-triple_out=./api ./api/api.proto\n$ make tidy\ngo mod tidy\n</code></pre>\n<ul>\n<li>指定镜像：</li>\n</ul>\n<p>修改 Makefile</p>\n<pre><code>IMAGE = xxx/dubbo-go-app\nHELM_INSTALL_NAME = dubbo-go-app\n</code></pre>\n<p>修改 chart/app/values.yaml</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">image:</span>\n  <span class=\"hljs-attr\">repository:</span> <span class=\"hljs-string\">xxx/dubbo-go-app</span>\n</code></pre>\n<ul>\n<li>\n<p>修改配置：使用xds协议作为注册中心</p>\n<p>conf/dubbogo.yaml</p>\n</li>\n</ul>\n<pre><code>dubbo:\n  registries:\n    xds:\n      protocol: xds\n      address: istiod.istio-system.svc.cluster.local:15010\n</code></pre>\n<ul>\n<li>\n<p>拉取最新依赖</p>\n<p><code>$ export GOPROXY=&quot;https://goproxy.cn&quot;</code></p>\n<p><code>$ go get dubbo.apache.org/dubbo-go/v3@3.0</code></p>\n<p><code>$ make tidy</code></p>\n</li>\n<li>\n<p>部署至集群</p>\n<p><code>$ make deploy</code></p>\n</li>\n</ul>\n<h4>2.3 验证部署信息</h4>\n<pre><code>$ kubectl get deployment\nNAME           READY   UP-TO-DATE   AVAILABLE   AGE\ndubbo-go-app   1/1     1            1           88s\n可查看到部署好的 dubbo-go 应用 \n\n$  kubectl get pods  -n istio-system | grep istiod | awk '{print $1 &quot; -n istio-system 8080 &quot;}' | xargs kubectl port-forward\nistio 调试端口port-forward 到本地\n浏览器打开 http://localhost:8080/debug/adsz\n可查看到注册的接口级映射的 Mapping 信息：\n&quot;providers:api.Greeter::\\&quot;:\\&quot;dubbo-go-app-v1.default.svc.cluster.local:20000\\&quot;\n</code></pre>\n<h2></h2>\n",
  "link": "/zh-cn/docs/user/tasks/mesh/app.html",
  "meta": {
    "title": "Istio 环境部署 Dubbo-go 应用",
    "keywords": "Istio 环境部署 Dubbo-go 应用",
    "description": "Istio 环境部署 Dubbo-go 应用"
  }
}