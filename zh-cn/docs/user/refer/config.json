{
  "filename": "config.md",
  "__html": "<h1>配置项参考</h1>\n<h2>根配置</h2>\n<h2>客户端配置</h2>\n<h2>服务端配置</h2>\n<h2>注册中心配置</h2>\n<h3>使用配置 API</h3>\n<ul>\n<li>客户端使用配置 API 设置注册中心</li>\n</ul>\n<p>可通过调用config.NewRegistryConfigWithProtocolDefaultPort方法，快速设置用于调试的注册中心，支持zookeeper(127.0.0.1:2181) 和nacos(127.0.0.1:8848)</p>\n<pre><code class=\"language-go\">rc := config.NewRootConfigBuilder().\n    SetConsumer(config.NewConsumerConfigBuilder().\n        SetRegistryIDs(<span class=\"hljs-string\">\"zookeeperID\"</span>). <span class=\"hljs-comment\">// use defined registryID</span>\n        Build()).\n    AddRegistry(<span class=\"hljs-string\">\"zookeeperID\"</span>, config.NewRegistryConfigWithProtocolDefaultPort(<span class=\"hljs-string\">\"zookeeper\"</span>)).\n    Build()\n</code></pre>\n<p>全部接口：可通过调用RegistryConfigBuilder提供的丰富接口进行配置。</p>\n<pre><code class=\"language-go\">rc := config.NewRootConfigBuilder().\n    SetConsumer(config.NewConsumerConfigBuilder().\n        SetRegistryIDs(<span class=\"hljs-string\">\"nacosRegistryID\"</span>). <span class=\"hljs-comment\">// use defined registryID</span>\n        AddReference(<span class=\"hljs-string\">\"GreeterClientImpl\"</span>,<span class=\"hljs-comment\">/*...*/</span>).\n        Build()\n    AddRegistry(<span class=\"hljs-string\">\"nacosRegistryID\"</span>, config.NewRegistryConfigBuilder().\n        SetProtocol(<span class=\"hljs-string\">\"nacos\"</span>).\n        SetAddress(<span class=\"hljs-string\">\"127.0.0.1:8848\"</span>).\n        SetGroup(<span class=\"hljs-string\">\"dubbo-go\"</span>).\n        SetNamespace(<span class=\"hljs-string\">\"dubbo\"</span>).\n        SetUsername(<span class=\"hljs-string\">\"admin\"</span>).\n        SetPassword(<span class=\"hljs-string\">\"admin\"</span>).\n        SetTimeout(<span class=\"hljs-string\">\"3s\"</span>).\n        Build()).\n    Build()\n</code></pre>\n<ul>\n<li>服务端使用配置 API 设置配置中心</li>\n</ul>\n<p>简易接口 config.NewRegistryConfigWithProtocolDefaultPort</p>\n<pre><code class=\"language-go\">rc := config.NewRootConfigBuilder().\n    SetProvider(config.NewProviderConfigBuilder().\n        AddService(<span class=\"hljs-string\">\"GreeterProvider\"</span>, <span class=\"hljs-comment\">/*...*/</span>).\n        SetRegistryIDs(<span class=\"hljs-string\">\"registryKey\"</span>).  <span class=\"hljs-comment\">// use defined registryID</span>\n        Build()).\n    AddRegistry(<span class=\"hljs-string\">\"registryKey\"</span>, config.NewRegistryConfigWithProtocolDefaultPort(<span class=\"hljs-string\">\"zookeeper\"</span>)).\n    Build()\n</code></pre>\n<p>全部接口：可通过调用RegistryConfigBuilder提供的丰富接口进行配置。</p>\n<pre><code class=\"language-go\">rc := config.NewRootConfigBuilder().\n    SetProvider(config.NewProviderConfigBuilder().\n        AddService(<span class=\"hljs-string\">\"GreeterProvider\"</span>,<span class=\"hljs-comment\">/*...*/</span>)\n        SetRegistryIDs(<span class=\"hljs-string\">\"registryKey\"</span>). <span class=\"hljs-comment\">// use defined registryID</span>\n        Build()).\n    AddRegistry(<span class=\"hljs-string\">\"registryKey\"</span>, config.NewRegistryConfigBuilder().\n        SetProtocol(<span class=\"hljs-string\">\"nacos\"</span>).\n        SetAddress(<span class=\"hljs-string\">\"127.0.0.1:8848\"</span>).\n        SetGroup(<span class=\"hljs-string\">\"dubbo-go\"</span>).\n        SetNamespace(<span class=\"hljs-string\">\"dubbo\"</span>).\n        SetUsername(<span class=\"hljs-string\">\"admin\"</span>).\n        SetPassword(<span class=\"hljs-string\">\"admin\"</span>).\n        SetTimeout(<span class=\"hljs-string\">\"3s\"</span>).\n        Build()).\n    Build()\n</code></pre>\n<h3></h3>\n<h2>网络协议</h2>\n<h3>配置文件</h3>\n<h3>使用配置 API</h3>\n<ul>\n<li>客户端使用配置 API 设置网络协议</li>\n</ul>\n<pre><code class=\"language-go\">rc := config.NewRootConfigBuilder().\n    SetConsumer(config.NewConsumerConfigBuilder().\n        AddReference(<span class=\"hljs-string\">\"GreeterClientImpl\"</span>, config.NewReferenceConfigBuilder().\n            SetInterface(<span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span>).\n            SetProtocol(<span class=\"hljs-string\">\"tri\"</span>). <span class=\"hljs-comment\">// set reference protcol to triple</span>\n            Build()).\n        Build()).\n    Build()\n</code></pre>\n<ul>\n<li>服务端使用配置 API 设置网络协议</li>\n</ul>\n<pre><code class=\"language-go\">rc := config.NewRootConfigBuilder().\n    SetProvider(config.NewProviderConfigBuilder().\n        AddService(<span class=\"hljs-string\">\"GreeterProvider\"</span>, config.NewServiceConfigBuilder().\n            SetInterface(<span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span>).\n            SetProtocolIDs(<span class=\"hljs-string\">\"tripleProtocolKey\"</span>). <span class=\"hljs-comment\">// use protocolID 'tripleProtocolKey'</span>\n            Build()).\n        Build()).\n    AddProtocol(<span class=\"hljs-string\">\"tripleProtocolKey\"</span>, config.NewProtocolConfigBuilder(). <span class=\"hljs-comment\">// define protocol config with protocolID 'tripleProtocolKey'</span>\n        SetName(<span class=\"hljs-string\">\"tri\"</span>). <span class=\"hljs-comment\">// set service protocol to triple</span>\n        Build()).\n    Build()\n</code></pre>\n<h3></h3>\n<p>下一章: <a href=\"./pixiu-nacos-triple.html\">【使用 Pixiu 暴露 Dubbo-go 服务】</a></p>\n",
  "link": "/zh-cn/docs/user/refer/config.html",
  "meta": {
    "title": "配置项参考",
    "keywords": "配置项参考",
    "description": "配置项参考"
  }
}