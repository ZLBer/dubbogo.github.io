{
  "filename": "generic.md",
  "__html": "<h1>泛化调用</h1>\n<h2>1. Dubbo-go 泛化调用 Java Server</h2>\n<p>使用 Triple 协议 + hessian2 序列化方案</p>\n<h3>1.1 Java-Server启动</h3>\n<ol>\n<li>传输结构定义</li>\n</ol>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.apache.dubbo;\n\n<span class=\"hljs-keyword\">import</span> java.io.Serializable;\n<span class=\"hljs-keyword\">import</span> java.util.Date;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>{\n\t<span class=\"hljs-keyword\">private</span> String id;\n\n  <span class=\"hljs-keyword\">private</span> String name;\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age;\n\n  <span class=\"hljs-keyword\">private</span> Date time = <span class=\"hljs-keyword\">new</span> Date();\n}\n</code></pre>\n<ol start=\"2\">\n<li>接口定义</li>\n</ol>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.apache.dubbo;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n<span class=\"hljs-comment\">//import org.apache.dubbo.rpc.filter.GenericFilter;</span>\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserProvider</span> </span>{\n\t<span class=\"hljs-function\">User <span class=\"hljs-title\">GetUser1</span><span class=\"hljs-params\">(String userId)</span></span>;\n}\n</code></pre>\n<h3>1.2 Go-Client 泛化调用</h3>\n<p>此处展示以 API 的形式构造泛化接口引用</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// 初始化 Reference 配置</span>\nrefConf := config.NewReferenceConfigBuilder().\n  SetInterface(<span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span>).\n  SetRegistryIDs(<span class=\"hljs-string\">\"zk\"</span>).\n  SetProtocol(tripleConst.TRIPLE).\n  SetGeneric(<span class=\"hljs-literal\">true</span>).\n  SetSerialization(<span class=\"hljs-string\">\"hessian2\"</span>).\n  Build()\n\n<span class=\"hljs-comment\">// 构造 Root 配置，引入注册中心模块</span>\nrootConfig := config.NewRootConfigBuilder().\n  AddRegistry(<span class=\"hljs-string\">\"zk\"</span>, config.NewRegistryConfigWithProtocolDefaultPort(<span class=\"hljs-string\">\"zookeeper\"</span>)).\n  Build()\n\n<span class=\"hljs-comment\">// Reference 配置初始化，因为需要使用注册中心进行服务发现，需要传入经过配置的 rootConfig</span>\n<span class=\"hljs-keyword\">if</span> err := refConf.Init(rootConfig); err != <span class=\"hljs-literal\">nil</span>{\n  <span class=\"hljs-built_in\">panic</span>(err)\n}\n\n<span class=\"hljs-comment\">// 泛化调用加载、服务发现</span>\nrefConf.GenericLoad(appName)\n\ntime.Sleep(time.Second)\n\n<span class=\"hljs-comment\">// 发起泛化调用</span>\nresp, err := refConf.GetRPCService().(*generic.GenericService).Invoke(\n  context.TODO(),\n  <span class=\"hljs-string\">\"getUser1\"</span>,\n  []<span class=\"hljs-keyword\">string</span>{<span class=\"hljs-string\">\"java.lang.String\"</span>},\n  []hessian.Object{<span class=\"hljs-string\">\"A003\"</span>},\n)\n\n<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n  <span class=\"hljs-built_in\">panic</span>(err)\n}\nlogger.Infof(<span class=\"hljs-string\">\"GetUser1(userId string) res: %+v\"</span>, resp)\n</code></pre>\n<p>GenericService 的 Invoke 方法包括三个参数：context.Context, []string, []hessian.Object,</p>\n<p>其中第二个参数为对应参数的 Java 类名，例如java.lang.String、org.apache.dubbo.User，第三个参数为参数列表，hessian.Object 即为 interface。第二、第三个参数应与方法签名一致，按顺序对应。</p>\n<p>获得map结构的返回结果</p>\n<pre><code>INFO    cmd/client.go:89        GetUser1(userId string) res: map[age:48 class:org.apache.dubbo.User id:A003 name:Joe sex:MAN time:2021-10-04 14:03:03.37 +0800 CST]\n</code></pre>\n",
  "link": "/zh-cn/docs/user/tasks/rpc/generic.html",
  "meta": {
    "title": "泛化调用",
    "keywords": "泛化调用",
    "description": "泛化调用"
  }
}