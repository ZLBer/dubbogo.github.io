{
  "filename": "exception_response.md",
  "__html": "<h1>Triple 协议异常回传</h1>\n<p>参考samples <a href=\"https://github.com/apache/dubbo-go-samples/tree/master/error\">dubbo-go-samples/error</a></p>\n<h2>用户异常回传介绍</h2>\n<p>用户可以在 provider 端生成用户定义的异常信息，可以记录异常产生堆栈，triple 协议可保证将用户在客户端获取到异常 message ，并可以查看报错堆栈，便于定位问题。</p>\n<p>注意返回 error 非 nil 时，框架不负责其他返回值的传递。</p>\n<ul>\n<li>在Triple provider 端返回异常，以 pb 序列化为例：</li>\n</ul>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"context\"</span>\n)\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/common/logger\"</span>\n\n  <span class=\"hljs-comment\">// 使用可以记录对战信息的异常库，此处以 \"github.com/pkg/errors\" 为例</span>\n\t<span class=\"hljs-string\">\"github.com/pkg/errors\"</span>\n)\n\n<span class=\"hljs-keyword\">import</span> (\n\ttriplepb <span class=\"hljs-string\">\"github.com/apache/dubbo-go-samples/api\"</span>\n)\n\n\n<span class=\"hljs-comment\">// 一个实现了 pb 接口的服务提供结构</span>\n<span class=\"hljs-keyword\">type</span> ErrorResponseProvider <span class=\"hljs-keyword\">struct</span> {\n\ttriplepb.UnimplementedGreeterServer\n}\n\n<span class=\"hljs-comment\">// 回传错误的接口</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *ErrorResponseProvider)</span> <span class=\"hljs-title\">SayHello</span><span class=\"hljs-params\">(ctx context.Context, in *triplepb.HelloRequest)</span> <span class=\"hljs-params\">(*triplepb.User, error)</span></span> {\n\tlogger.Infof(<span class=\"hljs-string\">\"Dubbo3 GreeterProvider get user name = %s\\n\"</span> + in.Name)\n  <span class=\"hljs-comment\">// 返回用户自定义异常</span>\n\t<span class=\"hljs-keyword\">return</span> &amp;triplepb.User{Name: <span class=\"hljs-string\">\"Hello \"</span> + in.Name, Id: <span class=\"hljs-string\">\"12345\"</span>, Age: <span class=\"hljs-number\">21</span>}, errors.New(<span class=\"hljs-string\">\"user defined error\"</span>)\n}\n\n</code></pre>\n<ul>\n<li>客户端打印异常和堆栈</li>\n</ul>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"context\"</span>\n)\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/common/logger\"</span>\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/config\"</span>\n\t_ <span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/imports\"</span>\n\n\ttripleCommon <span class=\"hljs-string\">\"github.com/dubbogo/triple/pkg/common\"</span>\n)\n\n<span class=\"hljs-keyword\">import</span> (\n\ttriplepb <span class=\"hljs-string\">\"github.com/apache/dubbo-go-samples/api\"</span>\n)\n\n<span class=\"hljs-keyword\">var</span> greeterProvider = <span class=\"hljs-built_in\">new</span>(triplepb.GreeterClientImpl)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span> {\n\tconfig.SetConsumerService(greeterProvider)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-keyword\">if</span> err := config.Load(); err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\n\treq := triplepb.HelloRequest{\n\t\tName: <span class=\"hljs-string\">\"laurence\"</span>,\n\t}\n\n  <span class=\"hljs-comment\">// 发起调用</span>\n\t<span class=\"hljs-keyword\">if</span> user, err := greeterProvider.SayHello(context.TODO(), &amp;req); err != <span class=\"hljs-literal\">nil</span> {\n    <span class=\"hljs-comment\">// 打印异常信息，err.Error() 将返回用户定义的 message，即 user defined error</span>\n\t\tlogger.Infof(<span class=\"hljs-string\">\"response result: %v, error = %s\"</span>, user, err)\n    \n    <span class=\"hljs-comment\">// 打印异常堆栈，需断言为 tripleCommon.TripleError</span>\n\t\tlogger.Infof(<span class=\"hljs-string\">\"error details = %+v\"</span>, err.(tripleCommon.TripleError).Stacks())\n\t}\n}\n\n</code></pre>\n<pre><code class=\"language-text\">2021-11-12T18:36:33.730+0800    INFO    cmd/client.go:53        response result: , error = user defined error\n2021-11-12T18:36:33.730+0800    INFO    cmd/client.go:54        error details = [type.googleapis.com/google.rpc.DebugInfo]:{stack_entries:&quot;user defined error\nmain.(*ErrorResponseProvider).SayHello\n       /dubbo-go-samples/error/triple/pb/go-server/cmd/error_reponse.go:40\nreflect.Value.call\n       /usr/local/go/src/reflect/value.go:543\nreflect.Value.Call\n       /usr/local/go/src/reflect/value.go:339\ndubbo.apache.org/dubbo-go/v3/common/proxy/proxy_factory.(*ProxyInvoker).Invoke\n       /Users/laurence/go/pkg/mod/dubbo.apache.org/dubbo-go/v3@v3.0.0-rc4-1/common/proxy/proxy_factory/default.go:145\n       ... \n\n</code></pre>\n<p>可看到报错信息和堆栈</p>\n<p>下一章: <a href=\"./custom-logger.html\">【日志】</a></p>\n",
  "link": "/zh-cn/docs/user/samples/exception_response.html",
  "meta": {
    "title": "dubbogo 3.0 异常回传",
    "keywords": "dubbogo 3.0 异常回传",
    "description": "dubbogo 3.0 异常回传"
  }
}