{
  "filename": "dubbogo_cli.md",
  "__html": "<h1>使用 dubbogo_cli 调试 Dubbo 服务</h1>\n<h2>1. 准备工作</h2>\n<ul>\n<li>dubbo-go cli 工具和依赖工具已安装</li>\n<li>创建一个新的 demo 应用</li>\n<li>参考任务<a href=\"../../rpc/choose_protocol.html\">【修改使用的协议】</a>将应用使用修改为使用 dubbo 协议暴露</li>\n</ul>\n<h2>2. 使用 grpc_cli 工具进行 Dubbo 服务调试</h2>\n<h3>2.1 开启服务端</h3>\n<p>示例：user.go:</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(u *UserProvider)</span> <span class=\"hljs-title\">GetUser</span><span class=\"hljs-params\">(ctx context.Context, userStruct *CallUserStruct)</span> <span class=\"hljs-params\">(*User, error)</span></span> {\n\tfmt.Printf(<span class=\"hljs-string\">\"=======================\\nreq:%#v\\n\"</span>, userStruct)\n\trsp := User{<span class=\"hljs-string\">\"A002\"</span>, <span class=\"hljs-string\">\"Alex Stocks\"</span>, <span class=\"hljs-number\">18</span>, userStruct.SubInfo}\n\tfmt.Printf(<span class=\"hljs-string\">\"=======================\\nrsp:%#v\\n\"</span>, rsp)\n\t<span class=\"hljs-keyword\">return</span> &amp;rsp, <span class=\"hljs-literal\">nil</span>\n}\n\n</code></pre>\n<p>服务端开启一个服务，名为GetUser，传入一个CallUserStruct的参数，返回一个User参数<br>\nCallUserStruct参数定义：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> CallUserStruct <span class=\"hljs-keyword\">struct</span> {\n\tID      <span class=\"hljs-keyword\">string</span>\n\tMale    <span class=\"hljs-keyword\">bool</span>\n\tSubInfo SubInfo <span class=\"hljs-comment\">// 嵌套子结构</span>\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(cs CallUserStruct)</span> <span class=\"hljs-title\">JavaClassName</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"com.ikurento.user.CallUserStruct\"</span>\n}\n\n<span class=\"hljs-keyword\">type</span> SubInfo <span class=\"hljs-keyword\">struct</span> {\n\tSubID   <span class=\"hljs-keyword\">string</span>\n\tSubMale <span class=\"hljs-keyword\">bool</span>\n\tSubAge  <span class=\"hljs-keyword\">int</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s SubInfo)</span> <span class=\"hljs-title\">JavaClassName</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"com.ikurento.user.SubInfo\"</span>\n}\n\n</code></pre>\n<p>User结构定义：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> User <span class=\"hljs-keyword\">struct</span> {\n\tId      <span class=\"hljs-keyword\">string</span>\n\tName    <span class=\"hljs-keyword\">string</span>\n\tAge     <span class=\"hljs-keyword\">int32</span>\n\tSubInfo SubInfo <span class=\"hljs-comment\">// 嵌套上述子结构SubInfo</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(u *User)</span> <span class=\"hljs-title\">JavaClassName</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"com.ikurento.user.User\"</span>\n}\n</code></pre>\n<p>开启服务：</p>\n<p><code>cd server</code><br>\n<code>source builddev.sh</code><br>\n<code>go run .</code></p>\n<h3>2.2 定义请求体(打解包协议)</h3>\n<p>请求体定义为json文件，约定键值均为string<br>\n键对应go语言struct字段名例如&quot;ID&quot;、&quot;Name&quot; ，值对应&quot;type@val&quot;<br>\n其中type支持string int bool time，val使用string 来初始化，如果只填写type则初始化为零值。\n约定每个struct必须有JavaClassName字段，务必与server端严格对应</p>\n<p>见userCall.json:</p>\n<pre><code class=\"language-json\">{\n  <span class=\"hljs-attr\">\"ID\"</span>: <span class=\"hljs-string\">\"string@A000\"</span>,\n  <span class=\"hljs-attr\">\"Male\"</span>: <span class=\"hljs-string\">\"bool@true\"</span>,\n  <span class=\"hljs-attr\">\"SubInfo\"</span>: {\n    <span class=\"hljs-attr\">\"SubID\"</span>: <span class=\"hljs-string\">\"string@A001\"</span>,\n    <span class=\"hljs-attr\">\"SubMale\"</span>: <span class=\"hljs-string\">\"bool@false\"</span>,\n    <span class=\"hljs-attr\">\"SubAge\"</span>: <span class=\"hljs-string\">\"int@18\"</span>,\n    <span class=\"hljs-attr\">\"JavaClassName\"</span>:<span class=\"hljs-string\">\"string@com.ikurento.user.SubInfo\"</span>\n  },\n  <span class=\"hljs-attr\">\"JavaClassName\"</span>: <span class=\"hljs-string\">\"string@com.ikurento.user.CallUserStruct\"</span>\n}\n</code></pre>\n<p>userCall.json将参数CallUserStruct的结构及子结构SubInfo都定义了出来，并且给请求参数赋值。</p>\n<p>user.json 同理，作为返回值不需要赋初始值，但JavaClassName字段一定与server端严格对应</p>\n<pre><code class=\"language-go\">{\n  <span class=\"hljs-string\">\"ID\"</span>: <span class=\"hljs-string\">\"string\"</span>,\n  <span class=\"hljs-string\">\"Name\"</span>: <span class=\"hljs-string\">\"string\"</span>,\n  <span class=\"hljs-string\">\"Age\"</span>: <span class=\"hljs-string\">\"int\"</span>,\n  <span class=\"hljs-string\">\"JavaClassName\"</span>:  <span class=\"hljs-string\">\"string@com.ikurento.user.User\"</span>,\n  <span class=\"hljs-string\">\"SubInfo\"</span>: {\n    <span class=\"hljs-string\">\"SubID\"</span>: <span class=\"hljs-string\">\"string\"</span>,\n    <span class=\"hljs-string\">\"SubMale\"</span>: <span class=\"hljs-string\">\"bool\"</span>,\n    <span class=\"hljs-string\">\"SubAge\"</span>: <span class=\"hljs-string\">\"int\"</span>,\n    <span class=\"hljs-string\">\"JavaClassName\"</span>:<span class=\"hljs-string\">\"string@com.ikurento.user.SubInfo\"</span>\n  }\n}\n</code></pre>\n<h3>2.3 执行请求</h3>\n<p><code>dubbogo-cli call --h=localhost --p 20001 --proto=dubbo --i=com.ikurento.user.UserProvider --method=GetUser --sendObj=&quot;./userCall.json&quot; --recvObj=&quot;./user.json&quot;</code></p>\n<p>cli端打印结果：</p>\n<pre><code class=\"language-log\">2020/10/26 20:47:45 Created pkg:\n2020/10/26 20:47:45 &amp;{ID:A000 Male:true SubInfo:0xc00006ea20 JavaClassName:com.ikurento.user.CallUserStruct}\n2020/10/26 20:47:45 SubInfo:\n2020/10/26 20:47:45 &amp;{SubID:A001 SubMale:false SubAge:18 JavaClassName:com.ikurento.user.SubInfo}\n\n\n2020/10/26 20:47:45 Created pkg:\n2020/10/26 20:47:45 &amp;{ID: Name: Age:0 JavaClassName:com.ikurento.user.User SubInfo:0xc00006ec90}\n2020/10/26 20:47:45 SubInfo:\n2020/10/26 20:47:45 &amp;{SubID: SubMale:false SubAge:0 JavaClassName:com.ikurento.user.SubInfo}\n\n\n2020/10/26 20:47:45 connected to localhost:20001!\n2020/10/26 20:47:45 try calling interface:com.ikurento.user.UserProvider.GetUser\n2020/10/26 20:47:45 with protocol:dubbo\n\n2020/10/26 20:47:45 After 3ms , Got Rsp:\n2020/10/26 20:47:45 &amp;{ID:A002 Name:Alex Stocks Age:18 JavaClassName: SubInfo:0xc0001241b0}\n2020/10/26 20:47:45 SubInfo:\n2020/10/26 20:47:45 &amp;{SubID:A001 SubMale:false SubAge:18 JavaClassName:}```\n</code></pre>\n<p>可看到详细的请求体赋值情况，以及返回结果和耗时。支持嵌套结构</p>\n<p>server端打印结果</p>\n<pre><code>=======================\nreq:&amp;main.CallUserStruct{ID:&quot;A000&quot;, Male:true, SubInfo:main.SubInfo{SubID:&quot;A001&quot;, SubMale:false, SubAge:18}}\n=======================\n</code></pre>\n<p>可见接收到了来自cli的数据</p>\n",
  "link": "/zh-cn/docs/user/tasks/debug/dubbogo_cli.html",
  "meta": {
    "title": "使用 Nacos 作为注册中心",
    "keywords": "使用 Nacos 作为注册中心",
    "description": "使用 Nacos 作为注册中心"
  }
}