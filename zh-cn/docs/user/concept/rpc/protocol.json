{
  "filename": "protocol.md",
  "__html": "<h1>网络协议</h1>\n<h2>1. RPC 服务框架与网络协议</h2>\n<p>网络协议在 RPC 场景十分重要，在微服务场景下，服务进程之间的通信依赖可以连通的网络，以及client与server 端保持一致的网络协议。网络协议是一个抽象的概念，站在 Dubbo-go 应用开发的角度，不妨把我们关注的协议分为三个维度来讨论。</p>\n<h3>1.1 打解包协议</h3>\n<p>Dubbo-go 服务框架内置的打解包协议都是基于 TCP/IP 协议栈的，在此基础之上，封装/引入了多种协议，例如 Triple(dubbo3)、Dubbo、gRPC。</p>\n<p>这一类协议重点关注 TCP 报文的封装和拆解过程，保证点对点的可靠通信。</p>\n<p>在 dubbo-go 生态中，支持多种网络往往值得这一类协议。</p>\n<h3>1.2 序列化协议</h3>\n<p>序列化协议负责将内存中的对象以特定格式序列化为二进制流。一些主流的序列化库有：具有较好可读性、应用广泛的 json 序列化方式；较高压缩效率，性能较好的 protobuf 序列化方式；适配与 Java 语言的 hessian2 序列化方式等。Dubbo-go 内置了这三种序列化方式</p>\n<p>序列化协议是需要开发者在业务开发过程中关注的，序列化协议往往需要特定的对象标注：</p>\n<p>一个由 protoc-gen-go 生成的 protobuf 序列对象的例子：</p>\n<pre><code class=\"language-protobuf\">type HelloRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tName string `protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\"`\n}\n</code></pre>\n<p>一个可与 java 服务互通的 hessian2 序列化对象</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> HelloRequest <span class=\"hljs-keyword\">struct</span> {\n\tName   <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`hessian:\"name\"`</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(u *HelloRequest)</span> <span class=\"hljs-title\">JavaClassName</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"org.apache.dubbo.sample.User\"</span>\n}\n</code></pre>\n<p>序列化协议与打解包协议的关系</p>\n<ul>\n<li>一种打解包协议可以适配于多种序列化协议支持：例如，您可以使用 dubbogo 的 triple 协议来传递 hessian序列化参数与 Dubbo-java 服务框架互通；传递 pb 序列化参数与原生 gRPC 服务互通；通过实现接口来自定义您的希望的序列化方式例如 json，从而传递具有较强可读性的参数。</li>\n</ul>\n<h3>1.3 接口协议</h3>\n<p>接口协议，是由业务开发人员开发并且维护的协议，用于描述服务接口的信息。例如接口名、方法、参数类型。</p>\n<p>以 Triple/gRPC 为例，开发人员可以使用插件，从 proto 文件中定义的接口生成存根(.pb.go 文件)，存根文件内包含接口所有信息，及接口协议。</p>\n<p>在编写服务时，客户端和服务端同时引入相同的接口，即可保证客户端发起针对特定接口和方法的调用，能被服务端正确识别和响应。</p>\n<p>一个由 proto 编写的接口描述文件：</p>\n<pre><code class=\"language-protobuf\">syntax = <span class=\"hljs-string\">\"proto3\"</span>;\n<span class=\"hljs-keyword\">package</span> api;\n\n<span class=\"hljs-keyword\">option</span> go_package = <span class=\"hljs-string\">\"./;api\"</span>;\n\n<span class=\"hljs-comment\">// The greeting service definition.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">service</span> <span class=\"hljs-title\">Greeter</span> </span>{\n  <span class=\"hljs-comment\">// Sends a greeting</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">rpc</span> SayHello (HelloRequest) <span class=\"hljs-keyword\">returns</span> (User) {}\n  // Sends a greeting via stream\n  <span class=\"hljs-keyword\">rpc</span> SayHelloStream (stream HelloRequest) <span class=\"hljs-keyword\">returns</span> (stream User) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1</span>;\n}\n\n<span class=\"hljs-comment\">// The response message containing the greetings</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">message</span> <span class=\"hljs-title\">User</span> </span>{\n  <span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-built_in\">string</span> id = <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-built_in\">int32</span> age = <span class=\"hljs-number\">3</span>;\n}\n</code></pre>\n<p>接口协议与序列化协议的关系</p>\n<ul>\n<li>接口协议是抽象的概念，一种接口协议可以使用多种接口描述语言来编写，并且可以转化成多种序列化协议对象。</li>\n</ul>\n<h2>2. Dubbo-go 支持的网络协议</h2>\n<p>Dubbo-go 支持的网络协议和序列化方式如下：</p>\n<table>\n<thead>\n<tr>\n<th>协议</th>\n<th>协议名 (用于配置)</th>\n<th style=\"text-align:center\">序列化方式</th>\n<th>默认序列化方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Triple 【推荐】</td>\n<td>tri</td>\n<td style=\"text-align:center\">pb/hessian2/msgpack/自定义</td>\n<td>pb</td>\n</tr>\n<tr>\n<td>Dubbo</td>\n<td>dubbo</td>\n<td style=\"text-align:center\">hessian2</td>\n<td>hessian2</td>\n</tr>\n<tr>\n<td>gRPC</td>\n<td>grpc</td>\n<td style=\"text-align:center\">pb</td>\n<td>pb</td>\n</tr>\n<tr>\n<td>jsonRPC</td>\n<td>jsonrpc</td>\n<td style=\"text-align:center\">json</td>\n<td>json</td>\n</tr>\n</tbody>\n</table>\n<p>相关阅读：<a href=\"https://developer.aliyun.com/article/878252\">【Dubbo-go 服务代理模型】</a></p>\n<p>下一章：<a href=\"./multi_language.html\">【多语言 RPC】</a></p>\n",
  "link": "/zh-cn/docs/user/concept/rpc/protocol.html",
  "meta": {
    "title": "Dubbo的网络协议",
    "keywords": "基本概念",
    "description": "Dubbo的网络协议"
  }
}