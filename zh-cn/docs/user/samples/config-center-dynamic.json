{
  "filename": "config-center-dynamic.md",
  "__html": "<h1>Dubbogo 3.0 配置中心和配置监听</h1>\n<h2>1. 配置中心概念</h2>\n<p>配置中心即为在分布式场景下，无法将最新的框架配置文件和应用程序绑定在一起，可以指定好配置中心的信息，例如配置中心类型和地址，并在框架启动时从配置中心拉取相应配置进行启动。</p>\n<h2>2. 配置中心的配置</h2>\n<p>参考仓库：<a href=\"https://github.com/apache/dubbo-go-samples/tree/master/configcenter\">dubbo-go-samples/configcenter</a></p>\n<p>dubbogo.yml</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">config-center:</span>\n    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">nacos</span>\n    <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:8848</span>\n    <span class=\"hljs-attr\">data-id:</span> <span class=\"hljs-string\">dubbo-go-samples-configcenter-nacos-server</span>\n</code></pre>\n<p>配置中心 nacos 内</p>\n<p>group 默认为 <code>dubbo</code></p>\n<p>dataID 为指定的id：<code>dubbo-go-samples-configcenter-nacos-server</code></p>\n<p>写入框架配置例如下面，即可正常启动。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">registries:</span>\n    <span class=\"hljs-attr\">demoZK:</span>\n      <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">zookeeper</span>\n      <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">3s</span>\n      <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:2181</span>\n  <span class=\"hljs-attr\">protocols:</span>\n    <span class=\"hljs-attr\">triple:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"tri\"</span>\n      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">20000</span>\n  <span class=\"hljs-attr\">provider:</span>\n    <span class=\"hljs-attr\">registry-ids:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">demoZK</span>\n    <span class=\"hljs-attr\">services:</span>\n      <span class=\"hljs-attr\">GreeterProvider:</span>\n        <span class=\"hljs-attr\">protocol-ids:</span> <span class=\"hljs-string\">triple</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">com.apache.dubbo.sample.basic.IGreeter</span> \n</code></pre>\n<h2>3. Dubbogo 动态配置 API</h2>\n<p>Config API 为 dubbogo 3.0 用来操作配置结构的 API。可使用框架提供的 Config API 进行配置结构的初始化，获取组件实例并使用。一个例子如下，包含了动态配置实例的初始化、发布配置、读取配置、订阅配置操作。</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">const</span> configCenterNacosServerConfig = <span class=\"hljs-string\">`# set in config center, group is 'dubbo', dataid is 'dubbo-go-samples-configcenter-nacos-server', namespace is default\ndubbo:\n  registries:\n    demoZK:\n      protocol: zookeeper\n      timeout: 3s\n      address: 127.0.0.1:2181\n  protocols:\n    triple:\n      name: tri\n      port: 20000\n  provider:\n    registry-ids:\n      - demoZK\n    services:\n      GreeterProvider:\n        protocol-ids: triple\n        interface: com.apache.dubbo.sample.basic.IGreeter # must be compatible with grpc or dubbo-java`</span>\n\n<span class=\"hljs-keyword\">type</span> GreeterProvider <span class=\"hljs-keyword\">struct</span> {\n  api.GreeterProviderBase\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *GreeterProvider)</span> <span class=\"hljs-title\">SayHello</span><span class=\"hljs-params\">(ctx context.Context, in *api.HelloRequest)</span> <span class=\"hljs-params\">(*api.User, error)</span></span> {\n  logger.Infof(<span class=\"hljs-string\">\"Dubbo3 GreeterProvider get user name = %s\\n\"</span>, in.Name)\n  <span class=\"hljs-keyword\">return</span> &amp;api.User{Name: <span class=\"hljs-string\">\"Hello \"</span> + in.Name, Id: <span class=\"hljs-string\">\"12345\"</span>, Age: <span class=\"hljs-number\">21</span>}, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// There is no need to export DUBBO_GO_CONFIG_PATH, as you are using config api to set config</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t <span class=\"hljs-comment\">// 获取动态配置实例 dynamicConfig</span>\n  dynamicConfig, err := config.NewConfigCenterConfigBuilder().\n    SetProtocol(<span class=\"hljs-string\">\"nacos\"</span>).\n    SetAddress(<span class=\"hljs-string\">\"127.0.0.1:8848\"</span>).\n    Build().GetDynamicConfiguration()\n  <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n    <span class=\"hljs-built_in\">panic</span>(err)\n  }\n  \n  <span class=\"hljs-comment\">// 使用 dynamicConfig 结构来发布配置</span>\n  <span class=\"hljs-keyword\">if</span> err := dynamicConfig.PublishConfig(<span class=\"hljs-string\">\"dubbo-go-samples-configcenter-nacos-server\"</span>, <span class=\"hljs-string\">\"dubbo\"</span>, <span class=\"hljs-string\">\"myConfigData\"</span>); err != <span class=\"hljs-literal\">nil</span> {\n    <span class=\"hljs-built_in\">panic</span>(err)\n  }\n  \n   <span class=\"hljs-comment\">// 使用 dynamicConfig 结构来读取配置</span>\n  data, err := dynamicConfig.GetRule(<span class=\"hljs-string\">\"dubbo-go-samples-configcenter-nacos-server\"</span>, config_center.WithGroup(<span class=\"hljs-string\">\"dubbo\"</span>))\n  <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{\n    <span class=\"hljs-built_in\">panic</span>(err)\n  }\n  logger.Infof(<span class=\"hljs-string\">\"get config = %s\"</span>, data)\n  \n  \n  <span class=\"hljs-comment\">// 使用 dynamicConfig 结构, 通过自定义listener来订阅配置更新事件</span>\n  l := &amp;listener{}\n  dynamicConfig.AddListener(<span class=\"hljs-string\">\"dubbo-go-samples-configcenter-nacos-server\"</span>, l)\n  \n  time.Sleep(time.Second * <span class=\"hljs-number\">10</span>)\n  \n  config.SetProviderService(&amp;GreeterProvider{})\n\n  <span class=\"hljs-comment\">// 以 API 的形式来启动框架</span>\n  rootConfig := config.NewRootConfigBuilder().\n    SetConfigCenter(config.NewConfigCenterConfigBuilder().\n      SetProtocol(<span class=\"hljs-string\">\"nacos\"</span>).SetAddress(<span class=\"hljs-string\">\"127.0.0.1:8848\"</span>). <span class=\"hljs-comment\">// 根据配置结构，设置配置中心</span>\n      SetDataID(<span class=\"hljs-string\">\"dubbo-go-samples-configcenter-nacos-server\"</span>). <span class=\"hljs-comment\">// 设置配置ID</span>\n      Build()).\n  Build()\n\n  <span class=\"hljs-keyword\">if</span> err := rootConfig.Init(); err != <span class=\"hljs-literal\">nil</span> { <span class=\"hljs-comment\">// 框架启动</span>\n    <span class=\"hljs-built_in\">panic</span>(err)\n  }\n  <span class=\"hljs-keyword\">select</span> {}\n}\n\n<span class=\"hljs-keyword\">type</span> listener <span class=\"hljs-keyword\">struct</span> {\n\t\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(l listener)</span> <span class=\"hljs-title\">Process</span><span class=\"hljs-params\">(event *config_center.ConfigChangeEvent)</span></span> {\n  logger.Infof(<span class=\"hljs-string\">\"listener get config = %s\"</span>, event.Value)\n}\n\n</code></pre>\n<p>当然，以 API 的形式来启动框架时，可以直接以API的形式来启动框架。参考基本概念模块的 <a href=\"../concept/configuration.html\">Dubbogo 框架配置</a></p>\n<h2>4. Dubbogo 配置热更新</h2>\n<p>// todo</p>\n<p>正在开发中ing</p>\n<p>下一章: <a href=\"./custom-filter.html\">【Filter】</a></p>\n",
  "link": "/zh-cn/docs/user/samples/config-center-dynamic.html",
  "meta": {
    "title": "dubbogo 3.0 动态配置",
    "keywords": "dubbogo 3.0 动态配置",
    "description": "dubbogo 3.0 动态配置"
  }
}