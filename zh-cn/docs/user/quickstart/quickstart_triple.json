{
  "filename": "quickstart_triple.md",
  "__html": "<h1>完成一次 RPC 调用</h1>\n<h2>1. 生成 Demo 项目</h2>\n<p>使用安装好的 dubbogo-cli 工具，创建demo工程。</p>\n<pre><code class=\"language-bash\">$ mkdir quickstart\n$ <span class=\"hljs-built_in\">cd</span> quickstart \n$ dubbogo-cli newDemo .\n$ tree .\n.\n├── api\n│   ├── samples_api.pb.go\n│   ├── samples_api.proto\n│   └── samples_api_triple.pb.go\n├── go-client\n│   ├── cmd\n│   │   └── client.go\n│   └── conf\n│       └── dubbogo.yaml\n├── go-server\n│   ├── cmd\n│   │   └── server.go\n│   └── conf\n│       └── dubbogo.yaml\n└── go.mod\n</code></pre>\n<p>可看到生成的项目中包含一个 client 项目和一个 server 项目，以及相关的配置文件。</p>\n<h3>1.1 查看接口描述文件 helloworld.proto</h3>\n<pre><code class=\"language-protobuf\">syntax = <span class=\"hljs-string\">\"proto3\"</span>;\n<span class=\"hljs-keyword\">package</span> api;\n\n<span class=\"hljs-keyword\">option</span> go_package = <span class=\"hljs-string\">\"./;api\"</span>;\n\n<span class=\"hljs-comment\">// The greeting service definition.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">service</span> <span class=\"hljs-title\">Greeter</span> </span>{\n  <span class=\"hljs-comment\">// Sends a greeting</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">rpc</span> SayHello (HelloRequest) <span class=\"hljs-keyword\">returns</span> (User) {}\n  // Sends a greeting via stream\n  <span class=\"hljs-keyword\">rpc</span> SayHelloStream (stream HelloRequest) <span class=\"hljs-keyword\">returns</span> (stream User) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1</span>;\n}\n\n<span class=\"hljs-comment\">// The response message containing the greetings</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">message</span> <span class=\"hljs-title\">User</span> </span>{\n  <span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-built_in\">string</span> id = <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-built_in\">int32</span> age = <span class=\"hljs-number\">3</span>;\n}\n</code></pre>\n<p>demo项目中，默认生成了一个接口描述文件，接口服务名为 api.Greeter, 包含两个 RPC 方法，入参为 HelloRequest，返回值为 User，两个方法分别为普通 RPC 方法和 Streaming 类型 RPC 方法。</p>\n<h3>1.2 (*可选) 使用安装好的编译工具编译 pb 接口</h3>\n<pre><code class=\"language-bash\">$ <span class=\"hljs-built_in\">cd</span> api\n$ protoc --go_out=. --go-triple_out=. ./samples_api.proto\n</code></pre>\n<p>参数意义：<code>--go_out=.</code> 使用上述安装的 <code>protoc-gen-go</code> 插件，生成文件到当前目录，<code>--go-triple_out=.</code>使用上述安装的 <code>protoc-gen-go-triple</code> 插件，生成文件到当前目录。</p>\n<p>执行该指令后，会生成两个文件，分别是helloworld.pb (包含 proto 结构) 和 helloworld_triple.pb.go (包含 triple 协议接口)。</p>\n<p>在 demo 工程中，预先生成好了这两个文件，修改 .proto 文件后重新执行命令生成，即可覆盖。</p>\n<h2>2. 开启一次RPC调用</h2>\n<p>项目根目录执行</p>\n<pre><code>$ go mod tidy\n</code></pre>\n<p>拉取到最新的框架依赖：</p>\n<pre><code class=\"language-go\">module helloworld\n\n<span class=\"hljs-keyword\">go</span> <span class=\"hljs-number\">1.17</span>\n\nrequire (\n\tdubbo.apache.org/dubbo-<span class=\"hljs-keyword\">go</span>/v3 v3<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>\n\tgithub.com/dubbogo/grpc-<span class=\"hljs-keyword\">go</span> v1<span class=\"hljs-number\">.42</span><span class=\"hljs-number\">.9</span>\n\tgithub.com/dubbogo/triple v1<span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.8</span>\n\tgoogle.golang.org/protobuf v1<span class=\"hljs-number\">.27</span><span class=\"hljs-number\">.1</span>\n)\n\nrequire (\n\t...\n)\n\n</code></pre>\n<p>先后启动服务端和客户端: 开启两个终端，在 go-server/cmd 和 go-client/cmd 文件夹下分别执行 <code>go run .</code> , 可在客户端看到输出：</p>\n<pre><code class=\"language-shell\">client response result: name:\"Hello laurence\" id:\"12345\" age:21\n</code></pre>\n<p>获得调用结果成功</p>\n<h2>3. 更多</h2>\n<p>细心的读者可以发现，以上例子编写的的服务端可以接受来自客户端的普通RPC、流式RPC调用请求。目前只编写了普通调用的Client，读者可以根据 samples 库中的例子来尝试编写流式客户端和服务端。</p>\n<p>更多samples可以参阅 <a href=\"../../samples/samples_repo.html\">【dubbo-go-samples】</a></p>\n",
  "link": "/zh-cn/docs/user/quickstart/quickstart_triple.html",
  "meta": {
    "title": "dubbo-go3.0快速开始",
    "keywords": "快速开始,helloworld,",
    "description": "快速上手dubbo-go3.0，编写一个简单的helloworld应用"
  }
}